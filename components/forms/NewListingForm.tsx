import { useState, useRef, FormEvent, useEffect, ChangeEvent, useMemo } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { 
  Save,
  Loader2,
  AlertCircle,
  MapPin,
  UploadCloud,
  Trash2,
  Image as ImageIcon
} from "lucide-react";
import { useSupabaseTable } from "@/hooks/use-supabase";
import { useCategories, Category } from '@/hooks/use-categories';
import slugify from 'slugify';
import { useAuth } from "@/providers/auth-provider";
import { createClient } from "@/lib/supabase/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import Image from 'next/image';
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Switch } from "@/components/ui/switch";
import { MapDisplay } from '../maps/MapDisplay';

// --- Define Listing Types ---
const LISTING_TYPES = [
  { value: "", label: "-- Select Listing Type --" }, // Default empty option
  { value: "Shop/Mall", label: "Shop / Mall" },
  { value: "Restaurant/Café", label: "Restaurant / Café" },
  { value: "Historical Site", label: "Historical Site" },
  { value: "Park/Nature", label: "Park / Nature" },
  { value: "Experience", label: "Experience" },
  { value: "Museum", label: "Museum" },
  { value: "Religious Site", label: "Religious Site" },
  { value: "Other", label: "Other" }, // Optional catch-all
];

// --- NEW Interfaces based on Schema Dump ---
interface Listing {
  id?: string; // UUID, generated by DB
  location: string; // text, NOT NULL
  google_maps_link?: string | null; // text, nullable
  tags?: string[] | null; // ARRAY, nullable
  photos_videos?: string[] | null; // ARRAY, nullable
  latitude?: number | null; // double precision, nullable
  longitude?: number | null; // double precision, nullable
  location_id?: string | null; // uuid, nullable (FK to locations)
  created_at?: string; // timestamptz, handled by DB
  updated_at?: string; // timestamptz, handled by DB
  listing_type?: string; // text, NOT NULL (Added based on user confirmation)
}

interface ListingTranslation {
  id?: string; // uuid, generated by DB
  listing_id: string; // uuid, NOT NULL (FK)
  language_code: string; // text, NOT NULL
  name: string; // text, NOT NULL
  description?: string | null; // text, nullable
  opening_hours?: string | null; // text, nullable
  // --- Added based on schema ---
  popular_stores?: string[] | null; // ARRAY, nullable
  entertainment?: string[] | null; // ARRAY, nullable
  dining_options?: string[] | null; // ARRAY, nullable
  special_services?: string[] | null; // ARRAY, nullable
  nearby_attractions?: string[] | null; // ARRAY, nullable
  parking_info?: string | null; // text, nullable
  cuisine_type?: string | null; // text, nullable
  story_behind?: string | null; // text, nullable
  menu_highlights?: string[] | null; // ARRAY, nullable
  price_range?: string | null; // text, nullable
  dietary_options?: string[] | null; // ARRAY, nullable
  reservation_info?: string | null; // text, nullable
  seating_options?: string[] | null; // ARRAY, nullable
  special_features?: string[] | null; // ARRAY, nullable
  historical_significance?: string | null; // text, nullable
  entry_fee?: string | null; // text, nullable
  best_time_to_visit?: string | null; // text, nullable
  tour_guide_availability?: string | null; // text, nullable
  tips?: string | null; // text, nullable
  activities?: string[] | null; // ARRAY, nullable
  facilities?: string[] | null; // ARRAY, nullable
  safety_tips?: string | null; // text, nullable
  duration?: string | null; // text, nullable
  highlights?: string[] | null; // ARRAY, nullable
  religious_significance?: string | null; // text, nullable
  entry_rules?: string | null; // text, nullable
  slug?: string | null; // text, nullable
}

// Interface for combined Category + Translation data (keep as is for now)
interface DisplayCategory extends Category {
  name_en?: string;
  name_ar?: string;
  description_en?: string;
  description_ar?: string;
  icon_url?: string; 
  translation_en_id?: string;
  translation_ar_id?: string;
}

// Add Collection Interfaces
interface CuratedCollection { 
  id: string;
  name_en: string; 
}
interface CollectionSelectionState {
  [collectionId: string]: {
    selected: boolean;
    featured: boolean;
  };
}

// Helper function - moved from HeroBannerForm / new page
const generateUniqueFilename = (file: File): string => {
    const extension = file.name.split('.').pop();
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 8);
    const sanitizedOriginalName = file.name
      .substring(0, file.name.lastIndexOf('.'))
      .replace(/[^a-zA-Z0-9_-]/g, '_')
      .substring(0, 50);
    return `${sanitizedOriginalName}_${timestamp}_${randomString}.${extension}`;
};

export function NewListingForm() {
  const router = useRouter();
  const formRef = useRef<HTMLFormElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [saving, setSaving] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [displayCategories, setDisplayCategories] = useState<DisplayCategory[]>([]);
  const [isFetchingLocation, setIsFetchingLocation] = useState(false);
  const [slugEnManuallySet, setSlugEnManuallySet] = useState(false);
  const [slugArManuallySet, setSlugArManuallySet] = useState(false);
  const { supabase: authSupabase } = useAuth(); // Get supabase client
  const supabase = authSupabase || createClient();

  // --- NEW State for multiple images ---
  const [stagedImageFiles, setStagedImageFiles] = useState<File[]>([]);
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  // ------------------------------------
  
  // --- State for Collections ---
  const [availableCollections, setAvailableCollections] = useState<CuratedCollection[]>([]);
  const [collectionSelections, setCollectionSelections] = useState<CollectionSelectionState>({});
  const [collectionsLoading, setCollectionsLoading] = useState(true);
  // ----------------------------
  
  const [formData, setFormData] = useState({
    listing_type: "", // Initialize as empty string
    location: "",
    location_ar: "",
    google_maps_link: "",
    latitude: "",
    longitude: "",
    location_id: null as string | null,
    google_place_id: null as string | null,
    tags: "",
    name_en: "",
    description_en: "",
    opening_hours_en: "",
    popular_stores_en: "",
    entertainment_en: "",
    dining_options_en: "",
    special_services_en: "",
    nearby_attractions_en: "",
    parking_info_en: "",
    cuisine_type_en: "",
    story_behind_en: "",
    menu_highlights_en: "",
    price_range_en: "",
    dietary_options_en: "",
    reservation_info_en: "",
    seating_options_en: "",
    special_features_en: "",
    historical_significance_en: "",
    entry_fee_en: "",
    best_time_to_visit_en: "",
    tour_guide_availability_en: "",
    tips_en: "",
    activities_en: "",
    facilities_en: "",
    safety_tips_en: "",
    duration_en: "",
    highlights_en: "",
    religious_significance_en: "",
    entry_rules_en: "",
    slug_en: "",
    name_ar: "",
    description_ar: "",
    opening_hours_ar: "",
    popular_stores_ar: "",
    entertainment_ar: "",
    dining_options_ar: "",
    special_services_ar: "",
    nearby_attractions_ar: "",
    parking_info_ar: "",
    cuisine_type_ar: "",
    story_behind_ar: "",
    menu_highlights_ar: "",
    price_range_ar: "",
    dietary_options_ar: "",
    reservation_info_ar: "",
    seating_options_ar: "",
    special_features_ar: "",
    historical_significance_ar: "",
    entry_fee_ar: "",
    best_time_to_visit_ar: "",
    tour_guide_availability_ar: "",
    tips_ar: "",
    activities_ar: "",
    facilities_ar: "",
    safety_tips_ar: "",
    duration_ar: "",
    highlights_ar: "",
    religious_significance_ar: "",
    entry_rules_ar: "",
    slug_ar: "",
    categoryIds: [] as string[],
  });
  
  const { add: addListing } = useSupabaseTable('listings');
  const { add: addListingCategory } = useSupabaseTable('listing_categories');
  const { add: addListingTranslation } = useSupabaseTable('listing_translations');
  
  const { categories: baseCategories, loading: categoriesLoading } = useCategories();
  
  // Hook for category translations (NEW)
  const { data: allCategoryTranslations, status: categoryTranslationsStatus } = useSupabaseTable('category_translations');

  // Effect to combine categories and translations (NEW)
  useEffect(() => {
      if (baseCategories && allCategoryTranslations) {
          const combined = baseCategories.map(cat => {
              const en = allCategoryTranslations.find(t => t.category_id === cat.id && t.language_code === 'en');
              const ar = allCategoryTranslations.find(t => t.category_id === cat.id && t.language_code === 'ar');
              return {
                  ...cat,
                  name_en: en?.name,
                  name_ar: ar?.name,
                  // Add other relevant fields if needed
              } as DisplayCategory;
          });
          // Sort if needed
          combined.sort((a, b) => (a.name_en ?? '').localeCompare(b.name_en ?? ''));
          setDisplayCategories(combined);
      }
  }, [baseCategories, allCategoryTranslations]);

  // Combine loading states for categories (NEW)
  const categoriesCombinedLoading = categoriesLoading || categoryTranslationsStatus !== 'success';
  
  // --- Fetch Available Collections ---
  useEffect(() => {
    const fetchCollectionData = async () => {
      if (!supabase) return;
      setCollectionsLoading(true);
      console.log("[NewListingForm] Fetching available collections...");
      try {
        const { data: collectionsData, error: collectionsError } = await supabase
          .from('curated_collections')
          .select(`id, curated_collection_translations!inner(name)`)
          .eq('curated_collection_translations.language_code', 'en')
          .order('created_at', { ascending: true });
          
        if (collectionsError) throw collectionsError;

        const formattedCollections: CuratedCollection[] = collectionsData?.map((c: any) => ({
            id: c.id,
            name_en: c.curated_collection_translations?.[0]?.name || 'Unnamed Collection'
        })) || [];
        setAvailableCollections(formattedCollections);
        console.log("[NewListingForm] Available Collections:", formattedCollections);

        // Initialize selection state (all deselected initially)
        const initialSelections: CollectionSelectionState = {};
        formattedCollections.forEach(coll => {
          initialSelections[coll.id] = { selected: false, featured: false };
        });
        setCollectionSelections(initialSelections);

      } catch (error: any) {
        console.error("Error fetching collection data:", error);
        setErrorMessage("Failed to load collection data: " + error.message);
      } finally {
        setCollectionsLoading(false);
      }
    };

    fetchCollectionData();
  }, [supabase]);
  // ---------------------------------

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    const newValue = type === 'checkbox' ? (e.target as HTMLInputElement).checked : value;
    
    setFormData(prev => {
      const updatedData = { ...prev, [name]: newValue };

      // Automatic slug generation
      if (name === 'name_en' && !slugEnManuallySet) {
        updatedData.slug_en = slugify(value, { lower: true, strict: true });
      } else if (name === 'name_ar' && !slugArManuallySet) {
        // Basic slugify for Arabic - may need refinement for better transliteration if required
        updatedData.slug_ar = slugify(value, { lower: true, strict: true }); 
      } else if (name === 'slug_en') {
        setSlugEnManuallySet(true); // User edited EN slug manually
      } else if (name === 'slug_ar') {
        setSlugArManuallySet(true); // User edited AR slug manually
      }
      return updatedData;
    });
  };

  // --- NEW Handler for Multiple Files ---
  const handleFilesSelected = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files);
      const validFiles: File[] = [];
      const newPreviews: string[] = [];
      let invalidFilesFound = false;

      newFiles.forEach(file => {
        if (file.type.startsWith('image/') && file.size <= 5 * 1024 * 1024) { // 5MB limit
          validFiles.push(file);
          newPreviews.push(URL.createObjectURL(file));
        } else {
          invalidFilesFound = true;
        }
      });

      if (invalidFilesFound) {
        alert("Some files were invalid (type must be image, size <= 5MB) and were ignored.");
      }

      setStagedImageFiles(prev => [...prev, ...validFiles]);
      setImagePreviews(prev => [...prev, ...newPreviews]);
      if (e.target) e.target.value = ""; // Reset file input
    }
  };
  
  // --- NEW Handler to remove a staged image ---
  const handleRemoveStagedImage = (indexToRemove: number) => {
    const previewToRemove = imagePreviews[indexToRemove];
    if (previewToRemove) {
      URL.revokeObjectURL(previewToRemove);
    }
    setStagedImageFiles(prev => prev.filter((_, index) => index !== indexToRemove));
    setImagePreviews(prev => prev.filter((_, index) => index !== indexToRemove));
  };

  // --- Cleanup Object URLs on unmount ---
  useEffect(() => {
    return () => {
      console.log("Cleaning up object URLs:", imagePreviews);
      imagePreviews.forEach(url => {
        console.log("Revoking:", url);
        URL.revokeObjectURL(url);
      });
    };
  }, [imagePreviews]);
  // -----------------------------------------

  const handleCategoryChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value, checked } = e.target;
    
    setFormData(prev => {
      let newCategoryIds = [...prev.categoryIds];
      
      if (checked && !newCategoryIds.includes(value)) {
        newCategoryIds.push(value);
      } else if (!checked && newCategoryIds.includes(value)) {
        newCategoryIds = newCategoryIds.filter(catId => catId !== value);
      }
      
      return {
        ...prev,
        categoryIds: newCategoryIds
      };
    });
  };

  // --- Collection Selection Handler (Same as EditForm) ---
  const handleCollectionChange = (collectionId: string, selected: boolean | string) => {
      setCollectionSelections(prev => ({
          ...prev,
          [collectionId]: {
              selected: typeof selected === 'string' ? (selected === 'true') : !!selected,
              featured: typeof selected === 'string' ? (selected === 'true') : !!selected ? prev[collectionId]?.featured || false : false 
          }
      }));
  };

  const handleFeatureChange = (collectionId: string, featured: boolean) => {
      setCollectionSelections(prev => ({
          ...prev,
          [collectionId]: {
              ...prev[collectionId], 
              featured: featured
          }
      }));
  };

  // --- NEW: Fetch Location Details Handler (Copied from Edit form) ---
  const handleFetchLocationDetails = async () => {
      const url = formData.google_maps_link;
      if (!url || !url.trim()) {
          setErrorMessage("Please enter a Google Maps link first.");
          return;
      }
      
      setIsFetchingLocation(true); 
      setErrorMessage(null); 
      console.log("[NewListingForm] Fetching location details for URL:", url);

      try {
          const response = await fetch('/api/location-lookup', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ url })
          });

          const data = await response.json();

          if (!response.ok) {
              console.error("Location Lookup API Error:", data);
              throw new Error(data.message || `Failed to fetch location details (${response.status})`);
          }

          console.log("[NewListingForm] Location details received:", data);
          
          // Update form state with fetched data
          setFormData(prev => ({
              ...prev,
              location: data.name_en || prev.location, 
              location_ar: data.name_ar || '', 
              latitude: data.latitude?.toString() || prev.latitude,
              longitude: data.longitude?.toString() || prev.longitude,
              google_place_id: data.google_place_id || null, 
          }));

      } catch (error: any) {
          console.error("Failed to fetch location details:", error);
          setErrorMessage(error.message || "An unexpected error occurred while fetching location details.");
      } finally {
          setIsFetchingLocation(false); 
      }
  };
  // -----------------------------------------

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!addListing || !addListingTranslation || !addListingCategory || !supabase) {
      setErrorMessage('Database functions not ready.');
      return;
    }
    if (stagedImageFiles.length === 0) {
        setErrorMessage('Please select at least one image.');
        return;
    }

    setSaving(true);
    setErrorMessage(null);
    
    let uploadedImagePaths: string[] = []; // To store paths from storage

    try {
      // 1. Upload all staged images concurrently
       console.log(`Uploading ${stagedImageFiles.length} image(s)...`);
       const uploadPromises = stagedImageFiles.map(file => {
           const uniqueFilename = generateUniqueFilename(file);
           // Make sure STORAGE_BUCKET_NAME is defined or replace 'listings'
           const bucket = 'listing-media'; // Use existing bucket name
           return supabase.storage.from(bucket).upload(uniqueFilename, file, {
               cacheControl: '3600',
               upsert: false,
           });
       });

       const uploadResults = await Promise.all(uploadPromises);

       // Check for errors and collect paths
       uploadResults.forEach((result, index) => {
           if (result.error) {
               console.error(`Error uploading file ${stagedImageFiles[index].name}:`, result.error);
               // Decide how to handle partial failures - here we throw an error
               throw new Error(`Failed to upload image ${stagedImageFiles[index].name}: ${result.error.message}`);
           }
           if (result.data?.path) {
               uploadedImagePaths.push(result.data.path);
           } else {
                // This shouldn't happen if error is null, but good to check
                throw new Error(`Upload succeeded for ${stagedImageFiles[index].name} but no path returned.`);
           }
       });
       console.log("Uploaded image paths:", uploadedImagePaths);


      // 2. Prepare listing data (use uploadedImagePaths)
      const listingData: Partial<Listing> = {
        listing_type: formData.listing_type,
        location: formData.location,
        google_maps_link: formData.google_maps_link || null,
        latitude: formData.latitude ? parseFloat(formData.latitude) : null,
        longitude: formData.longitude ? parseFloat(formData.longitude) : null,
        location_id: formData.location_id || null,
        tags: formData.tags ? formData.tags.split(',').map(s => s.trim()) : null,
        photos_videos: uploadedImagePaths, // <-- Use the array of paths
      };

      // Add validation (e.g., ensure listing_type and location are set)
       if (!listingData.listing_type || !listingData.location) {
            throw new Error("Listing Type and Location are required.");
       }
       
      // 3. Add Listing
       console.log("Inserting listing:", listingData);
      const newListing = await addListing(listingData);
      if (!newListing || !newListing.id) {
        throw new Error('Failed to create listing or get new listing ID.');
      }
      const newListingId = newListing.id;
      console.log("Listing created with ID:", newListingId);

      // 4. Add Translations (Prepare EN and AR)
      const translations = [];
      const commonTranslationData = { listing_id: newListingId };
      // Helper to parse comma-separated string to array or null
      const parseArray = (input: string): string[] | null => {
          const trimmed = input.trim();
          return trimmed ? trimmed.split(',').map(s => s.trim()) : null;
      };

      // English Translation
      if (formData.name_en) { // Assuming name_en is required for EN translation
          translations.push({
              ...commonTranslationData,
              language_code: 'en',
              name: formData.name_en,
              description: formData.description_en || null,
              opening_hours: formData.opening_hours_en || null,
              popular_stores: parseArray(formData.popular_stores_en),
              entertainment: parseArray(formData.entertainment_en),
              dining_options: parseArray(formData.dining_options_en),
              special_services: parseArray(formData.special_services_en),
              nearby_attractions: parseArray(formData.nearby_attractions_en),
              parking_info: formData.parking_info_en || null,
              cuisine_type: formData.cuisine_type_en || null,
              story_behind: formData.story_behind_en || null,
              menu_highlights: parseArray(formData.menu_highlights_en),
              price_range: formData.price_range_en || null,
              dietary_options: parseArray(formData.dietary_options_en),
              reservation_info: formData.reservation_info_en || null,
              seating_options: parseArray(formData.seating_options_en),
              special_features: parseArray(formData.special_features_en),
              historical_significance: formData.historical_significance_en || null,
              entry_fee: formData.entry_fee_en || null,
              best_time_to_visit: formData.best_time_to_visit_en || null,
              tour_guide_availability: formData.tour_guide_availability_en || null,
              tips: formData.tips_en || null,
              activities: parseArray(formData.activities_en),
              facilities: parseArray(formData.facilities_en),
              safety_tips: formData.safety_tips_en || null,
              duration: formData.duration_en || null,
              highlights: parseArray(formData.highlights_en),
              religious_significance: formData.religious_significance_en || null,
              entry_rules: formData.entry_rules_en || null,
              slug: formData.slug_en || null,
          });
      } else {
         throw new Error("English Name is required."); // Make EN name mandatory
      }

       // Arabic Translation
      if (formData.name_ar) { // Assuming name_ar is required for AR translation
          translations.push({
               ...commonTranslationData,
              language_code: 'ar',
              name: formData.name_ar,
              description: formData.description_ar || null,
              opening_hours: formData.opening_hours_ar || null,
              popular_stores: parseArray(formData.popular_stores_ar),
              entertainment: parseArray(formData.entertainment_ar),
              dining_options: parseArray(formData.dining_options_ar),
              special_services: parseArray(formData.special_services_ar),
              nearby_attractions: parseArray(formData.nearby_attractions_ar),
              parking_info: formData.parking_info_ar || null,
              cuisine_type: formData.cuisine_type_ar || null,
              story_behind: formData.story_behind_ar || null,
              menu_highlights: parseArray(formData.menu_highlights_ar),
              price_range: formData.price_range_ar || null,
              dietary_options: parseArray(formData.dietary_options_ar),
              reservation_info: formData.reservation_info_ar || null,
              seating_options: parseArray(formData.seating_options_ar),
              special_features: parseArray(formData.special_features_ar),
              historical_significance: formData.historical_significance_ar || null,
              entry_fee: formData.entry_fee_ar || null,
              best_time_to_visit: formData.best_time_to_visit_ar || null,
              tour_guide_availability: formData.tour_guide_availability_ar || null,
              tips: formData.tips_ar || null,
              activities: parseArray(formData.activities_ar),
              facilities: parseArray(formData.facilities_ar),
              safety_tips: formData.safety_tips_ar || null,
              duration: formData.duration_ar || null,
              highlights: parseArray(formData.highlights_ar),
              religious_significance: formData.religious_significance_ar || null,
              entry_rules: formData.entry_rules_ar || null,
              slug: formData.slug_ar || null,
          });
      } else {
           throw new Error("Arabic Name is required."); // Make AR name mandatory
      }

      if (translations.length > 0) {
          console.log("Inserting translations:", translations);
          const translationPromises = translations.map(t => addListingTranslation(t));
          const translationResults = await Promise.all(translationPromises);
          // Check results for errors if addListingTranslation hook returns them
           if (translationResults.some(result => !result)) { // Basic check, adjust if hook returns error object
                throw new Error('Failed to save one or more translations.');
           }
      }

      // 5. Add Category Links
      if (formData.categoryIds.length > 0) {
        const categoryLinkPromises = formData.categoryIds.map(catId => 
          addListingCategory({ listing_id: newListingId, category_id: catId })
        );
        await Promise.all(categoryLinkPromises);
         // Add error checking if needed
      }

      // 6. Success - Reset state and redirect
      console.log("Listing created successfully!");
      setStagedImageFiles([]); // Clear staged files
      setImagePreviews([]);    // Clear previews
      formRef.current?.reset(); // Reset form fields
      router.push('/dashboard/listings'); // Redirect to listings page

    } catch (err: any) {
      console.error('Error creating listing:', err);
      setErrorMessage(err.message || 'An unexpected error occurred.');

      // Optional: Attempt to delete already uploaded images if DB insert fails
      if (uploadedImagePaths.length > 0 && supabase) {
          console.warn(`Attempting to delete ${uploadedImagePaths.length} orphaned image(s) due to error.`);
          try {
               // Make sure STORAGE_BUCKET_NAME is defined or replace 'listings'
               const bucket = 'listing-media'; // Use existing bucket name
               await supabase.storage.from(bucket).remove(uploadedImagePaths);
          } catch (cleanupError) {
              console.error("Failed to delete orphaned image(s) during cleanup:", cleanupError);
          }
      }

    } finally {
      setSaving(false);
    }
  };

  // --- Memoize parsed coordinates (Copied from Edit form) --- 
  const parsedLatitude = useMemo(() => {
    const lat = parseFloat(formData.latitude);
    return isNaN(lat) ? null : lat;
  }, [formData.latitude]);

  const parsedLongitude = useMemo(() => {
    const lng = parseFloat(formData.longitude);
    return isNaN(lng) ? null : lng;
  }, [formData.longitude]);
  // --------------------------------
  
  // --- Loading States Combination ---

  return (
    <form ref={formRef} onSubmit={handleSubmit} className="space-y-8">
      {errorMessage && (
         <div className="bg-destructive/10 border border-destructive/30 text-destructive p-4 rounded-lg flex items-center gap-2">
           <AlertCircle className="h-5 w-5 flex-shrink-0" />
           <p className="text-sm">{errorMessage}</p>
         </div>
      )}
      
      {/* --- Main Info Card --- */}
      <Card>
         {/* Listing Type Dropdown (keep as is) */}
         <CardHeader><CardTitle>Core Listing Details</CardTitle></CardHeader>
         <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
             <div className="space-y-2">
                <Label htmlFor="listing_type">Listing Type *</Label>
                <Select 
                    name="listing_type" 
                    onValueChange={(value) => setFormData(prev => ({ ...prev, listing_type: value }))} // Simplified state update
                    value={formData.listing_type} 
                >
                    <SelectTrigger id="listing_type">
                        <SelectValue placeholder="Select Listing Type" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectGroup>
                           {LISTING_TYPES.filter(type => type.value !== "").map(type => (
                               <SelectItem key={type.value} value={type.value} >
                                   {type.label}
                               </SelectItem>
                           ))}
                        </SelectGroup>
                    </SelectContent>
                </Select>
             </div>
             
             {/* Location Name EN */}
             <div className="space-y-2">
                <Label htmlFor="name_en">Location Name (English) *</Label>
                <Input id="name_en" name="name_en" value={formData.name_en} onChange={handleChange} placeholder="e.g., Central Park Mall" required />
             </div>
         </CardContent>
      </Card>
      
      {/* --- NEW Multi-Image Upload Card --- */}
      <Card>
        <CardHeader>
          <CardTitle>Listing Images *</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
            {/* Hidden File Input */}
            <Input
                ref={fileInputRef}
                id="photos_videos"
                name="photos_videos"
                type="file"
                multiple
                accept="image/*" // Accept only image files
                onChange={handleFilesSelected}
                className="hidden" // Keep it hidden, trigger via button
                aria-hidden="true"
            />
            {/* Upload Button */}
            <Button
                type="button"
                variant="outline"
                onClick={() => fileInputRef.current?.click()} // Trigger hidden input
                disabled={saving}
            >
                <UploadCloud className="mr-2 h-4 w-4" /> Select Images
            </Button>

            {/* Image Previews Grid */}
            {imagePreviews.length > 0 && (
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mt-4 border p-4 rounded-md">
                    {imagePreviews.map((previewUrl, index) => (
                        <div key={previewUrl} className="relative group aspect-square border rounded-md overflow-hidden shadow-sm">
                            <Image
                                src={previewUrl}
                                alt={`Preview ${index + 1}`}
                                layout="fill"
                                objectFit="cover"
                                unoptimized // Required for blob URLs
                            />
                            {/* Remove Button Overlay */}
                            <Button
                                type="button"
                                variant="destructive"
                                size="icon"
                                className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity z-10 rounded-full p-1" // Small, round, appears on hover
                                onClick={() => handleRemoveStagedImage(index)}
                                disabled={saving}
                                aria-label={`Remove image ${index + 1}`}
                            >
                                <Trash2 className="h-4 w-4" />
                            </Button>
                        </div>
                    ))}
                </div>
            )}
            {/* Placeholder when no images are selected */}
            {stagedImageFiles.length === 0 && (
                <div className="text-center text-muted-foreground border-2 border-dashed border-gray-300 rounded-md p-6 mt-4">
                     <ImageIcon className="mx-auto h-12 w-12 text-gray-400" />
                    <p className="mt-2 text-sm">No images selected.</p>
                    <p className="text-xs text-gray-500">Click the button above to add images (up to 5MB each).</p>
                </div>
            )}
        </CardContent>
      </Card>

      {/* --- NEW: Location Details Card (Partial) --- */}
      <Card>
          <CardHeader>
              <CardTitle>Location Details</CardTitle>
              <CardDescription>Set the location using a Google Maps link or by manually entering coordinates.</CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4">
              {/* Google Maps Link & Fetch */} 
              <div className="space-y-2">
                  <Label htmlFor="google_maps_link">Google Maps Link</Label>
                  <div className="flex gap-2">
                      <Input
                          id="google_maps_link"
                          name="google_maps_link"
                          value={formData.google_maps_link}
                          onChange={handleChange}
                          placeholder="Paste Google Maps URL here"
                      />
                      <Button 
                          type="button" 
                          onClick={handleFetchLocationDetails} 
                          disabled={isFetchingLocation || !formData.google_maps_link}
                      >
                          {isFetchingLocation ? "Fetching..." : "Fetch Details"}
                      </Button>
                  </div>
              </div>

              {/* Tags */}
              <div className="space-y-2">
                  <Label htmlFor="tags">Tags (comma-separated)</Label>
                  <Input 
                      id="tags"
                      name="tags"
                      value={formData.tags}
                      onChange={handleChange}
                      placeholder="e.g., luxury, family-friendly, outdoor"
                  />
              </div>
              
              {/* English Address */} 
              <div className="space-y-2">
                  <Label htmlFor="location">Location Name / Address (English)</Label>
                  <Textarea
                      id="location"
                      name="location"
                      value={formData.location} 
                      onChange={handleChange}
                      placeholder="e.g., Main Street, Downtown"
                  />
              </div>

              {/* Arabic Address */} 
              <div className="space-y-2">
                  <Label htmlFor="location_ar">Location Name / Address (Arabic)</Label>
                  <Textarea 
                      id="location_ar" 
                      name="location_ar" 
                      value={formData.location_ar} 
                      onChange={handleChange} 
                      placeholder="مثال: الشارع الرئيسي، وسط البلد" 
                      dir="rtl" // Set text direction to right-to-left
                  />
              </div>

              {/* Latitude & Longitude (Re-adding) */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                      <Label htmlFor="latitude">Latitude</Label>
                      <Input
                          id="latitude"
                          name="latitude"
                          value={formData.latitude}
                          onChange={handleChange}
                          placeholder="e.g., 25.2048"
                          type="number" // Ensure type is number for better input handling
                          step="any"     // Allow decimals
                      />
                  </div>
                  <div className="space-y-2">
                      <Label htmlFor="longitude">Longitude</Label>
                      <Input
                          id="longitude"
                          name="longitude"
                          value={formData.longitude}
                          onChange={handleChange}
                          placeholder="e.g., 55.2708"
                          type="number" // Ensure type is number
                          step="any"     // Allow decimals
                      />
                  </div>
              </div>

              {/* Map Preview */} 
              {(parsedLatitude !== null && parsedLongitude !== null) && (
                  <div className="space-y-2 mt-4">
                       <Label>Map Preview</Label>
                       <MapDisplay 
                           latitude={parsedLatitude}
                           longitude={parsedLongitude}
                       />
                  </div>
              )}
          </CardContent>
      </Card>
      {/* ---------------------------------------- */}

      {/* Categories Card (Existing) */}
      <Card>
        <CardHeader><CardTitle>Categories</CardTitle></CardHeader>
         <CardContent>
             {categoriesCombinedLoading ? (
                 <p>Loading categories...</p>
             ) : displayCategories.length > 0 ? (
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {displayCategories.map(category => (
                        <div key={category.id} className="flex items-center space-x-2">
                            <Checkbox 
                                id={`category-${category.id}`}
                                value={category.id}
                                checked={formData.categoryIds.includes(category.id)}
                                onCheckedChange={(checked: boolean) => handleCategoryChange({ target: { value: category.id, checked } } as any)}
                            />
                            <label
                                htmlFor={`category-${category.id}`}
                                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                            >
                                {category.name_en || '(No English Name)'} / {category.name_ar || '(No Arabic Name)'}
                            </label>
                        </div>
                    ))}
                </div>
             ) : (
                 <p>No categories found.</p>
             )}
         </CardContent>
      </Card>

      {/* --- Curated Collections Card (Same as EditForm) --- */}
      <Card>
        <CardHeader>
          <CardTitle>Curated Collections</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {collectionsLoading ? (
             <div className="flex justify-center items-center p-4"><Loader2 className="h-5 w-5 animate-spin text-muted-foreground" /></div>
          ) : availableCollections.length === 0 ? (
            <p className="text-sm text-muted-foreground">No collections available.</p>
          ) : (
            availableCollections.map((collection) => (
              <div key={collection.id} className="flex items-center justify-between gap-4 rounded-md border p-3">
                <div className="flex items-center gap-3">
                   <Checkbox
                    id={`collection-${collection.id}`}
                    checked={collectionSelections[collection.id]?.selected || false}
                    onCheckedChange={(checked) => handleCollectionChange(collection.id, !!checked)}
                  />
                  <Label htmlFor={`collection-${collection.id}`} className="cursor-pointer">
                    {collection.name_en}
                  </Label>
                </div>
                {collectionSelections[collection.id]?.selected && (
                   <div className="flex items-center gap-2">
                       <Label htmlFor={`feature-${collection.id}`} className="text-sm text-muted-foreground">
                         Feature on Home
                       </Label>
                       <Switch
                           id={`feature-${collection.id}`}
                           checked={collectionSelections[collection.id]?.featured || false}
                           onCheckedChange={(checked) => handleFeatureChange(collection.id, checked)}
                       />
                   </div>
                )}
              </div>
            ))
          )}
        </CardContent>
      </Card>

      {/* --- NEW: Side-by-Side Language Content --- */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* --- English Content Card --- */}
          <Card>
              <CardHeader><CardTitle>English Content</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 gap-6">
                  {/* === Always Shown Fields (EN) === */}
                  <div className="space-y-2">
                      <Label htmlFor="name_en">Name (English) *</Label>
                      <Input id="name_en" name="name_en" value={formData.name_en} onChange={handleChange} required />
                  </div>
                  <div className="space-y-2">
                      <Label htmlFor="slug_en">Slug (English)</Label>
                      <Input id="slug_en" name="slug_en" value={formData.slug_en} onChange={handleChange} />
                  </div>
                  <div className="space-y-2">
                      <Label htmlFor="description_en">Description (English)</Label>
                      <Textarea id="description_en" name="description_en" value={formData.description_en} onChange={handleChange} />
                  </div>
                  <div className="space-y-2">
                      <Label htmlFor="opening_hours_en">Opening Hours (English)</Label>
                      <Input id="opening_hours_en" name="opening_hours_en" value={formData.opening_hours_en} onChange={handleChange} />
                  </div>

                  {/* === Shop/Mall Specific Fields (EN) === */}
                  {formData.listing_type === 'Shop/Mall' && (
                      <>
                         <div className="space-y-2"><Label htmlFor="popular_stores_en">Popular Stores (English, comma-separated)</Label><Input id="popular_stores_en" name="popular_stores_en" value={formData.popular_stores_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entertainment_en">Entertainment (English, comma-separated)</Label><Input id="entertainment_en" name="entertainment_en" value={formData.entertainment_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="dining_options_en">Dining Options (English, comma-separated)</Label><Input id="dining_options_en" name="dining_options_en" value={formData.dining_options_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="special_services_en">Special Services (English, comma-separated)</Label><Input id="special_services_en" name="special_services_en" value={formData.special_services_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_en">Nearby Attractions (English, comma-separated)</Label><Input id="nearby_attractions_en" name="nearby_attractions_en" value={formData.nearby_attractions_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_en">Parking Info (English)</Label><Input id="parking_info_en" name="parking_info_en" value={formData.parking_info_en} onChange={handleChange} /></div>
                     </>
                  )}

                  {/* === Restaurant/Café Specific Fields (EN) === */}
                  {formData.listing_type === 'Restaurant/Café' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="cuisine_type_en">Cuisine Type (English)</Label><Input id="cuisine_type_en" name="cuisine_type_en" value={formData.cuisine_type_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="story_behind_en">Story Behind (English)</Label><Textarea id="story_behind_en" name="story_behind_en" value={formData.story_behind_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="menu_highlights_en">Menu Highlights (English, comma-separated)</Label><Input id="menu_highlights_en" name="menu_highlights_en" value={formData.menu_highlights_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="price_range_en">Price Range (English)</Label><Input id="price_range_en" name="price_range_en" value={formData.price_range_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="dietary_options_en">Dietary Options (English, comma-separated)</Label><Input id="dietary_options_en" name="dietary_options_en" value={formData.dietary_options_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="reservation_info_en">Reservation Info (English)</Label><Input id="reservation_info_en" name="reservation_info_en" value={formData.reservation_info_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="seating_options_en">Seating Options (English, comma-separated)</Label><Input id="seating_options_en" name="seating_options_en" value={formData.seating_options_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="special_features_en">Special Features (English, comma-separated)</Label><Input id="special_features_en" name="special_features_en" value={formData.special_features_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_en">Parking Info (English)</Label><Input id="parking_info_en" name="parking_info_en" value={formData.parking_info_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_en">Nearby Attractions (English, comma-separated)</Label><Input id="nearby_attractions_en" name="nearby_attractions_en" value={formData.nearby_attractions_en} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Historical Site Specific Fields (EN) === */}
                 {formData.listing_type === 'Historical Site' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="historical_significance_en">Historical Significance (English)</Label><Textarea id="historical_significance_en" name="historical_significance_en" value={formData.historical_significance_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_fee_en">Entry Fee (English)</Label><Input id="entry_fee_en" name="entry_fee_en" value={formData.entry_fee_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_en">Best Time to Visit (English)</Label><Input id="best_time_to_visit_en" name="best_time_to_visit_en" value={formData.best_time_to_visit_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tour_guide_availability_en">Tour Guide Availability (English)</Label><Input id="tour_guide_availability_en" name="tour_guide_availability_en" value={formData.tour_guide_availability_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_en">Tips (English)</Label><Textarea id="tips_en" name="tips_en" value={formData.tips_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="facilities_en">Facilities (English, comma-separated)</Label><Input id="facilities_en" name="facilities_en" value={formData.facilities_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_en">Nearby Attractions (English, comma-separated)</Label><Input id="nearby_attractions_en" name="nearby_attractions_en" value={formData.nearby_attractions_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_en">Parking Info (English)</Label><Input id="parking_info_en" name="parking_info_en" value={formData.parking_info_en} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Park/Nature Specific Fields (EN) === */}
                 {formData.listing_type === 'Park/Nature' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="activities_en">Activities (English, comma-separated)</Label><Input id="activities_en" name="activities_en" value={formData.activities_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="facilities_en">Facilities (English, comma-separated)</Label><Input id="facilities_en" name="facilities_en" value={formData.facilities_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="safety_tips_en">Safety Tips (English)</Label><Textarea id="safety_tips_en" name="safety_tips_en" value={formData.safety_tips_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_en">Best Time to Visit (English)</Label><Input id="best_time_to_visit_en" name="best_time_to_visit_en" value={formData.best_time_to_visit_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_fee_en">Entry Fee (English)</Label><Input id="entry_fee_en" name="entry_fee_en" value={formData.entry_fee_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_en">Nearby Attractions (English, comma-separated)</Label><Input id="nearby_attractions_en" name="nearby_attractions_en" value={formData.nearby_attractions_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_en">Parking Info (English)</Label><Input id="parking_info_en" name="parking_info_en" value={formData.parking_info_en} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Experience Specific Fields (EN) === */}
                 {formData.listing_type === 'Experience' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="duration_en">Duration (English)</Label><Input id="duration_en" name="duration_en" value={formData.duration_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="highlights_en">Highlights (English, comma-separated)</Label><Input id="highlights_en" name="highlights_en" value={formData.highlights_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="price_range_en">Price Range (English)</Label><Input id="price_range_en" name="price_range_en" value={formData.price_range_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_en">Tips (English)</Label><Textarea id="tips_en" name="tips_en" value={formData.tips_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="safety_tips_en">Safety Tips (English)</Label><Textarea id="safety_tips_en" name="safety_tips_en" value={formData.safety_tips_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_en">Nearby Attractions (English, comma-separated)</Label><Input id="nearby_attractions_en" name="nearby_attractions_en" value={formData.nearby_attractions_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_en">Parking Info (English)</Label><Input id="parking_info_en" name="parking_info_en" value={formData.parking_info_en} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Museum Specific Fields (EN) === */}
                 {formData.listing_type === 'Museum' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="entry_fee_en">Entry Fee (English)</Label><Input id="entry_fee_en" name="entry_fee_en" value={formData.entry_fee_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_en">Best Time to Visit (English)</Label><Input id="best_time_to_visit_en" name="best_time_to_visit_en" value={formData.best_time_to_visit_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tour_guide_availability_en">Tour Guide Availability (English)</Label><Input id="tour_guide_availability_en" name="tour_guide_availability_en" value={formData.tour_guide_availability_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_en">Tips (English)</Label><Textarea id="tips_en" name="tips_en" value={formData.tips_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="facilities_en">Facilities (English, comma-separated)</Label><Input id="facilities_en" name="facilities_en" value={formData.facilities_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_en">Nearby Attractions (English, comma-separated)</Label><Input id="nearby_attractions_en" name="nearby_attractions_en" value={formData.nearby_attractions_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_en">Parking Info (English)</Label><Input id="parking_info_en" name="parking_info_en" value={formData.parking_info_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="highlights_en">Highlights (English, comma-separated)</Label><Input id="highlights_en" name="highlights_en" value={formData.highlights_en} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Religious Site Specific Fields (EN) === */}
                 {formData.listing_type === 'Religious Site' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="religious_significance_en">Religious Significance (English)</Label><Textarea id="religious_significance_en" name="religious_significance_en" value={formData.religious_significance_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_rules_en">Entry Rules (English)</Label><Textarea id="entry_rules_en" name="entry_rules_en" value={formData.entry_rules_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_en">Best Time to Visit (English)</Label><Input id="best_time_to_visit_en" name="best_time_to_visit_en" value={formData.best_time_to_visit_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_en">Tips (English)</Label><Textarea id="tips_en" name="tips_en" value={formData.tips_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="facilities_en">Facilities (English, comma-separated)</Label><Input id="facilities_en" name="facilities_en" value={formData.facilities_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_en">Nearby Attractions (English, comma-separated)</Label><Input id="nearby_attractions_en" name="nearby_attractions_en" value={formData.nearby_attractions_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_en">Parking Info (English)</Label><Input id="parking_info_en" name="parking_info_en" value={formData.parking_info_en} onChange={handleChange} /></div>
                     </>
                 )}
              </CardContent>
          </Card>

          {/* --- Arabic Content Card --- */}
          <Card>
              <CardHeader><CardTitle>Arabic Content</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 gap-6">
                  {/* === Always Shown Fields (AR) === */}
                  <div className="space-y-2"><Label htmlFor="name_ar">Name (Arabic) *</Label><Input dir="rtl" id="name_ar" name="name_ar" value={formData.name_ar} onChange={handleChange} required /></div>
                  <div className="space-y-2"><Label htmlFor="slug_ar">Slug (Arabic)</Label><Input dir="rtl" id="slug_ar" name="slug_ar" value={formData.slug_ar} onChange={handleChange} /></div>
                  <div className="space-y-2"><Label htmlFor="description_ar">Description (Arabic)</Label><Textarea dir="rtl" id="description_ar" name="description_ar" value={formData.description_ar} onChange={handleChange} /></div>
                  <div className="space-y-2"><Label htmlFor="opening_hours_ar">Opening Hours (Arabic)</Label><Input dir="rtl" id="opening_hours_ar" name="opening_hours_ar" value={formData.opening_hours_ar} onChange={handleChange} /></div>

                  {/* === Shop/Mall Specific Fields (AR) === */}
                  {formData.listing_type === 'Shop/Mall' && (
                      <>
                         <div className="space-y-2"><Label htmlFor="popular_stores_ar">Popular Stores (Arabic, comma-separated)</Label><Input dir="rtl" id="popular_stores_ar" name="popular_stores_ar" value={formData.popular_stores_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entertainment_ar">Entertainment (Arabic, comma-separated)</Label><Input dir="rtl" id="entertainment_ar" name="entertainment_ar" value={formData.entertainment_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="dining_options_ar">Dining Options (Arabic, comma-separated)</Label><Input dir="rtl" id="dining_options_ar" name="dining_options_ar" value={formData.dining_options_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="special_services_ar">Special Services (Arabic, comma-separated)</Label><Input dir="rtl" id="special_services_ar" name="special_services_ar" value={formData.special_services_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_ar">Nearby Attractions (Arabic, comma-separated)</Label><Input dir="rtl" id="nearby_attractions_ar" name="nearby_attractions_ar" value={formData.nearby_attractions_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label><Input dir="rtl" id="parking_info_ar" name="parking_info_ar" value={formData.parking_info_ar} onChange={handleChange} /></div>
                      </>
                  )}

                  {/* === Restaurant/Café Specific Fields (AR) === */}
                  {formData.listing_type === 'Restaurant/Café' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="cuisine_type_ar">Cuisine Type (Arabic)</Label><Input dir="rtl" id="cuisine_type_ar" name="cuisine_type_ar" value={formData.cuisine_type_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="story_behind_ar">Story Behind (Arabic)</Label><Textarea dir="rtl" id="story_behind_ar" name="story_behind_ar" value={formData.story_behind_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="menu_highlights_ar">Menu Highlights (Arabic, comma-separated)</Label><Input dir="rtl" id="menu_highlights_ar" name="menu_highlights_ar" value={formData.menu_highlights_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="price_range_ar">Price Range (Arabic)</Label><Input dir="rtl" id="price_range_ar" name="price_range_ar" value={formData.price_range_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="dietary_options_ar">Dietary Options (Arabic, comma-separated)</Label><Input dir="rtl" id="dietary_options_ar" name="dietary_options_ar" value={formData.dietary_options_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="reservation_info_ar">Reservation Info (Arabic)</Label><Input dir="rtl" id="reservation_info_ar" name="reservation_info_ar" value={formData.reservation_info_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="seating_options_ar">Seating Options (Arabic, comma-separated)</Label><Input dir="rtl" id="seating_options_ar" name="seating_options_ar" value={formData.seating_options_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="special_features_ar">Special Features (Arabic, comma-separated)</Label><Input dir="rtl" id="special_features_ar" name="special_features_ar" value={formData.special_features_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label><Input dir="rtl" id="parking_info_ar" name="parking_info_ar" value={formData.parking_info_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_ar">Nearby Attractions (Arabic, comma-separated)</Label><Input dir="rtl" id="nearby_attractions_ar" name="nearby_attractions_ar" value={formData.nearby_attractions_ar} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Historical Site Specific Fields (AR) === */}
                 {formData.listing_type === 'Historical Site' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="historical_significance_ar">Historical Significance (Arabic)</Label><Textarea dir="rtl" id="historical_significance_ar" name="historical_significance_ar" value={formData.historical_significance_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_fee_ar">Entry Fee (Arabic)</Label><Input dir="rtl" id="entry_fee_ar" name="entry_fee_ar" value={formData.entry_fee_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_ar">Best Time to Visit (Arabic)</Label><Input dir="rtl" id="best_time_to_visit_ar" name="best_time_to_visit_ar" value={formData.best_time_to_visit_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tour_guide_availability_ar">Tour Guide Availability (Arabic)</Label><Input dir="rtl" id="tour_guide_availability_ar" name="tour_guide_availability_ar" value={formData.tour_guide_availability_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_ar">Tips (Arabic)</Label><Textarea dir="rtl" id="tips_ar" name="tips_ar" value={formData.tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="facilities_ar">Facilities (Arabic, comma-separated)</Label><Input dir="rtl" id="facilities_ar" name="facilities_ar" value={formData.facilities_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_ar">Nearby Attractions (Arabic, comma-separated)</Label><Input dir="rtl" id="nearby_attractions_ar" name="nearby_attractions_ar" value={formData.nearby_attractions_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label><Input dir="rtl" id="parking_info_ar" name="parking_info_ar" value={formData.parking_info_ar} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Park/Nature Specific Fields (AR) === */}
                 {formData.listing_type === 'Park/Nature' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="activities_ar">Activities (Arabic, comma-separated)</Label><Input dir="rtl" id="activities_ar" name="activities_ar" value={formData.activities_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="facilities_ar">Facilities (Arabic, comma-separated)</Label><Input dir="rtl" id="facilities_ar" name="facilities_ar" value={formData.facilities_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="safety_tips_ar">Safety Tips (Arabic)</Label><Textarea dir="rtl" id="safety_tips_ar" name="safety_tips_ar" value={formData.safety_tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_ar">Best Time to Visit (Arabic)</Label><Input dir="rtl" id="best_time_to_visit_ar" name="best_time_to_visit_ar" value={formData.best_time_to_visit_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_fee_ar">Entry Fee (Arabic)</Label><Input dir="rtl" id="entry_fee_ar" name="entry_fee_ar" value={formData.entry_fee_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_ar">Nearby Attractions (Arabic, comma-separated)</Label><Input dir="rtl" id="nearby_attractions_ar" name="nearby_attractions_ar" value={formData.nearby_attractions_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label><Input dir="rtl" id="parking_info_ar" name="parking_info_ar" value={formData.parking_info_ar} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Experience Specific Fields (AR) === */}
                 {formData.listing_type === 'Experience' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="duration_ar">Duration (Arabic)</Label><Input dir="rtl" id="duration_ar" name="duration_ar" value={formData.duration_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="highlights_ar">Highlights (Arabic, comma-separated)</Label><Input dir="rtl" id="highlights_ar" name="highlights_ar" value={formData.highlights_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="price_range_ar">Price Range (Arabic)</Label><Input dir="rtl" id="price_range_ar" name="price_range_ar" value={formData.price_range_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_ar">Tips (Arabic)</Label><Textarea dir="rtl" id="tips_ar" name="tips_ar" value={formData.tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="safety_tips_ar">Safety Tips (Arabic)</Label><Textarea dir="rtl" id="safety_tips_ar" name="safety_tips_ar" value={formData.safety_tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_ar">Nearby Attractions (Arabic, comma-separated)</Label><Input dir="rtl" id="nearby_attractions_ar" name="nearby_attractions_ar" value={formData.nearby_attractions_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label><Input dir="rtl" id="parking_info_ar" name="parking_info_ar" value={formData.parking_info_ar} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Museum Specific Fields (AR) === */}
                 {formData.listing_type === 'Museum' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="entry_fee_ar">Entry Fee (Arabic)</Label><Input dir="rtl" id="entry_fee_ar" name="entry_fee_ar" value={formData.entry_fee_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_ar">Best Time to Visit (Arabic)</Label><Input dir="rtl" id="best_time_to_visit_ar" name="best_time_to_visit_ar" value={formData.best_time_to_visit_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tour_guide_availability_ar">Tour Guide Availability (Arabic)</Label><Input dir="rtl" id="tour_guide_availability_ar" name="tour_guide_availability_ar" value={formData.tour_guide_availability_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_ar">Tips (Arabic)</Label><Textarea dir="rtl" id="tips_ar" name="tips_ar" value={formData.tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="facilities_ar">Facilities (Arabic, comma-separated)</Label><Input dir="rtl" id="facilities_ar" name="facilities_ar" value={formData.facilities_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_ar">Nearby Attractions (Arabic, comma-separated)</Label><Input dir="rtl" id="nearby_attractions_ar" name="nearby_attractions_ar" value={formData.nearby_attractions_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label><Input dir="rtl" id="parking_info_ar" name="parking_info_ar" value={formData.parking_info_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="highlights_ar">Highlights (Arabic, comma-separated)</Label><Input dir="rtl" id="highlights_ar" name="highlights_ar" value={formData.highlights_ar} onChange={handleChange} /></div>
                     </>
                 )}

                 {/* === Religious Site Specific Fields (AR) === */}
                 {formData.listing_type === 'Religious Site' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="religious_significance_ar">Religious Significance (Arabic)</Label><Textarea dir="rtl" id="religious_significance_ar" name="religious_significance_ar" value={formData.religious_significance_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_rules_ar">Entry Rules (Arabic)</Label><Textarea dir="rtl" id="entry_rules_ar" name="entry_rules_ar" value={formData.entry_rules_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_ar">Best Time to Visit (Arabic)</Label><Input dir="rtl" id="best_time_to_visit_ar" name="best_time_to_visit_ar" value={formData.best_time_to_visit_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_ar">Tips (Arabic)</Label><Textarea dir="rtl" id="tips_ar" name="tips_ar" value={formData.tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="facilities_ar">Facilities (Arabic, comma-separated)</Label><Input dir="rtl" id="facilities_ar" name="facilities_ar" value={formData.facilities_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="nearby_attractions_ar">Nearby Attractions (Arabic, comma-separated)</Label><Input dir="rtl" id="nearby_attractions_ar" name="nearby_attractions_ar" value={formData.nearby_attractions_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label><Input dir="rtl" id="parking_info_ar" name="parking_info_ar" value={formData.parking_info_ar} onChange={handleChange} /></div>
                     </>
                 )}
              </CardContent>
          </Card>
      </div> { /* End Side-by-Side Language Content */ }

      {/* Submit Buttons */}
      <div className="flex justify-end gap-3 mt-8">
        <Link href="/dashboard/listings">
          <Button type="button" variant="outline" disabled={saving}>Cancel</Button>
        </Link>
        <Button type="submit" disabled={saving}>
          {saving ? (
             <> <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Saving Listing... </>
          ) : (
             <> <Save className="mr-2 h-4 w-4" /> Create Listing </>
          )}
        </Button>
      </div>
    </form>
  );
} 