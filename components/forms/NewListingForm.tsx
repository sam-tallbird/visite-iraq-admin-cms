import { useState, useRef, FormEvent, useEffect, ChangeEvent, useMemo, useCallback } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { 
  Save,
  Loader2,
  AlertCircle,
  MapPin,
  UploadCloud,
  Trash2,
  Image as ImageIcon
} from "lucide-react";
import { useSupabaseTable } from "@/hooks/use-supabase";
import { useCategories, Category } from '@/hooks/use-categories';
import slugify from 'slugify';
import { useAuth } from "@/providers/auth-provider";
import { createClient } from "@/lib/supabase/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import Image from 'next/image';
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Switch } from "@/components/ui/switch";
import { MapDisplay } from '../maps/MapDisplay';
import { Database, Json } from '@/lib/database.types';
import { OpeningHoursInput, OpeningHoursData } from './OpeningHoursInput';
import { TagInput } from "@/components/ui/TagInput"; // Import TagInput
import { PriceRangeSelector } from '@/components/ui/PriceRangeSelector'; // Import the new component

// --- Define Listing Types ---
const LISTING_TYPES = [
  { value: "", label: "-- Select Listing Type --" }, // Default empty option
  { value: "Shop/Mall", label: "Shop / Mall" },
  { value: "Restaurant/Café", label: "Restaurant / Café" },
  { value: "Historical Site", label: "Historical Site" },
  { value: "Park/Nature", label: "Park / Nature" },
  { value: "Experience", label: "Experience" },
  { value: "Museum", label: "Museum" },
  { value: "Religious Site", label: "Religious Site" },
  { value: "Other", label: "Other" }, // Optional catch-all
];

// --- Add IRAQ_PROVINCES Constant ---
const IRAQ_PROVINCES = [
  { en: "Al Anbar", ar: "الأنبار" },
  { en: "Babylon", ar: "بابل" },
  { en: "Baghdad", ar: "بغداد" },
  { en: "Basra", ar: "البصرة" },
  { en: "Dhi Qar", ar: "ذي قار" },
  { en: "Diyala", ar: "ديالى" },
  { en: "Dohuk", ar: "دهوك" },
  { en: "Erbil", ar: "أربيل" },
  { en: "Karbala", ar: "كربلاء" },
  { en: "Kirkuk", ar: "كركوك" },
  { en: "Maysan", ar: "ميسان" },
  { en: "Muthanna", ar: "المثنى" },
  { en: "Najaf", ar: "النجف" },
  { en: "Nineveh", ar: "نينوى" },
  { en: "Qadisiyyah", ar: "القادسية" },
  { en: "Saladin", ar: "صلاح الدين" },
  { en: "Sulaymaniyah", ar: "السليمانية" },
  { en: "Wasit", ar: "واسط" },
];
// --- End IRAQ_PROVINCES ---

// --- NEW Parking Options ---
const PARKING_OPTIONS = [
  { en: "Paid Parking", ar: "مواقف مدفوعة" },
  { en: "Valet Parking", ar: "خدمة صف السيارات" },
  { en: "VIP Parking", ar: "مواقف VIP" },
  { en: "Street Parking", ar: "مواقف الشارع" },
  { en: "Garage Parking", ar: "مواقف كراج" },
  { en: "No Parking", ar: "لا يوجد مواقف" }
];
// --- End Parking Options ---

// --- NEW Interfaces based on Schema Dump ---
interface Listing {
  id?: string; // UUID, generated by DB
  location: string; // text, NOT NULL
  google_maps_link?: string | null; // text, nullable
  tags?: string[] | null; // ARRAY, nullable
  photos_videos?: string[] | null; // ARRAY, nullable
  latitude?: number | null; // double precision, nullable
  longitude?: number | null; // double precision, nullable
  location_id?: string | null; // uuid, nullable (FK to locations)
  created_at?: string; // timestamptz, handled by DB
  updated_at?: string; // timestamptz, handled by DB
  listing_type?: string; // text, NOT NULL (Added based on user confirmation)
}

interface ListingTranslation {
  id?: string; // uuid, generated by DB
  listing_id: string; // uuid, NOT NULL (FK)
  language_code: string; // text, NOT NULL
  name: string; // text, NOT NULL
  description?: string | null; // text, nullable
  opening_hours?: string | null; // text, nullable
  // --- Added based on schema ---
  popular_stores?: string[] | null; // ARRAY, nullable
  entertainment?: string[] | null; // ARRAY, nullable
  dining_options?: string[] | null; // ARRAY, nullable
  special_services?: string[] | null; // ARRAY, nullable
  parking_info?: string | null; // text, nullable
  cuisine_type?: string | null; // text, nullable
  story_behind?: string | null; // text, nullable
  menu_highlights?: string[] | null; // ARRAY, nullable
  price_range?: number | null; // integer, nullable
  dietary_options?: string[] | null; // ARRAY, nullable

  special_features?: string[] | null; // ARRAY, nullable
  historical_significance?: string | null; // text, nullable
  entry_fee?: string | null; // text, nullable
  best_time_to_visit?: string | null; // text, nullable
  tour_guide_availability?: string | null; // text, nullable
  tips?: string | null; // text, nullable
  activities?: string[] | null; // ARRAY, nullable
  facilities?: string[] | null; // ARRAY, nullable
  safety_tips?: string | null; // text, nullable
  duration?: string | null; // text, nullable
  highlights?: string[] | null; // ARRAY, nullable
  religious_significance?: string | null; // text, nullable
  entry_rules?: string | null; // text, nullable
  slug?: string | null; // text, nullable
}

// Interface for combined Category + Translation data (keep as is for now)
interface DisplayCategory extends Category {
  name_en?: string;
  name_ar?: string;
  description_en?: string;
  description_ar?: string;
  icon_url?: string; 
  translation_en_id?: string;
  translation_ar_id?: string;
}

// Add Collection Interfaces
interface CuratedCollection { 
  id: string;
  name_en: string; 
}
interface CollectionSelectionState {
  [collectionId: string]: {
    selected: boolean;
    featured: boolean;
  };
}

// Helper function - moved from HeroBannerForm / new page
const generateUniqueFilename = (file: File): string => {
    const extension = file.name.split('.').pop();
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 8);
    const sanitizedOriginalName = file.name
      .substring(0, file.name.lastIndexOf('.'))
      .replace(/[^a-zA-Z0-9_-]/g, '_')
      .substring(0, 50);
    return `${sanitizedOriginalName}_${timestamp}_${randomString}.${extension}`;
};

// Update the form data interface
interface FormData {
  listing_type: string;
  location: string;
  location_ar: string;
  google_maps_link: string;
  latitude: string;
  longitude: string;
  location_id: string | null;
  google_place_id: string | null;
  tags: string[]; // Correct
  name_en: string;
  description_en: string;
  opening_hours_en: string;
  popular_stores_en: string[]; // Corrected type
  entertainment_en: string[]; // Corrected type
  dining_options_en: string[]; // Corrected type
  special_services_en: string[]; // Corrected type
  parking_info_en: string;
  cuisine_type_en: string;
  story_behind_en: string;
  menu_highlights_en: string[]; // Corrected type
  price_range: number | null;
  dietary_options_en: string[]; // Corrected type
   // Corrected type
  special_features_en: string[]; // Corrected type
  historical_significance_en: string;
  entry_fee_en: string;
  best_time_to_visit_en: string;
  tour_guide_availability_en: string;
  tips_en: string;
  activities_en: string[]; // Corrected type
  facilities_en: string[]; // Corrected type
  safety_tips_en: string;
  duration_en: string;
  highlights_en: string[]; // Corrected type
  religious_significance_en: string;
  entry_rules_en: string;
  slug_en: string;
  name_ar: string;
  description_ar: string;
  opening_hours_ar: string;
  popular_stores_ar: string[]; // Corrected init
  entertainment_ar: string[]; // Corrected init
  dining_options_ar: string[]; // Corrected init
  special_services_ar: string[]; // Corrected init
  parking_info_ar: string;
  cuisine_type_ar: string;
  story_behind_ar: string;
  menu_highlights_ar: string[]; // Corrected init
  price_range_ar: string;
  dietary_options_ar: string[]; // Corrected init
 
  special_features_ar: string[]; // Corrected init
  historical_significance_ar: string;
  entry_fee_ar: string;
  best_time_to_visit_ar: string;
  tour_guide_availability_ar: string;
  tips_ar: string;
  activities_ar: string[]; // Corrected init
  facilities_ar: string[]; // Corrected init
  safety_tips_ar: string;
  duration_ar: string;
  highlights_ar: string[]; // Corrected init
  religious_significance_ar: string;
  entry_rules_ar: string;
  slug_ar: string;
  categoryIds: string[];
  city_en: string;
  city_ar: string;
  opening_hours: OpeningHoursData;
}

export function NewListingForm() {
  const router = useRouter();
  const formRef = useRef<HTMLFormElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // ++ Add generic handler for all TagInput fields ++
  const handleGenericTagInputChange = useCallback((fieldName: keyof FormData, newValueString: string) => {
      const newTagsArray = newValueString.split(',').map(tag => tag.trim()).filter(Boolean);
      setFormData(prev => ({ ...prev, [fieldName]: newTagsArray }));
  }, []);

  const [saving, setSaving] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [isFetchingLocation, setIsFetchingLocation] = useState(false);
  const [slugEnManuallySet, setSlugEnManuallySet] = useState(false);
  const [slugArManuallySet, setSlugArManuallySet] = useState(false);
  const { supabase: authSupabase } = useAuth(); // Get supabase client
  const supabase = createClient(); // REMOVED generic <Database>

  // --- NEW State for multiple images ---
  const [stagedImageFiles, setStagedImageFiles] = useState<File[]>([]);
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  // --- NEW State for primary image selection ---
  const [primaryImageIndex, setPrimaryImageIndex] = useState<number>(0);
  // -------------------------------------------
  
  // --- State for Collections ---
  const [availableCollections, setAvailableCollections] = useState<CuratedCollection[]>([]);
  const [collectionSelections, setCollectionSelections] = useState<CollectionSelectionState>({});
  const [collectionsLoading, setCollectionsLoading] = useState(true);
  const [errorCollections, setErrorCollections] = useState<string | null>(null);
  const [isLoadingCollections, setIsLoadingCollections] = useState(true);
  // ----------------------------
  
  // Update the initial form data
  const [formData, setFormData] = useState<FormData>({
    listing_type: "", 
    location: "",
    location_ar: "",
    google_maps_link: "",
    latitude: "",
    longitude: "",
    location_id: null as string | null,
    google_place_id: null as string | null,
    tags: [], 
    name_en: "",
    description_en: "",
    opening_hours_en: "",
    popular_stores_en: [], 
    entertainment_en: [], 
    dining_options_en: [], 
    special_services_en: [], 
    parking_info_en: "",
    cuisine_type_en: "",
    story_behind_en: "",
    menu_highlights_en: [], 
    price_range: null,
    dietary_options_en: [], 
   
    special_features_en: [], 
    historical_significance_en: "",
    entry_fee_en: "",
    best_time_to_visit_en: "",
    tour_guide_availability_en: "",
    tips_en: "",
    activities_en: [], 
    facilities_en: [], 
    safety_tips_en: "",
    duration_en: "",
    highlights_en: [], 
    religious_significance_en: "",
    entry_rules_en: "",
    slug_en: "",
    name_ar: "",
    description_ar: "",
    opening_hours_ar: "",
    popular_stores_ar: [], // Corrected init
    entertainment_ar: [], // Corrected init
    dining_options_ar: [], // Corrected init
    special_services_ar: [], // Corrected init
    parking_info_ar: "",
    cuisine_type_ar: "",
    story_behind_ar: "",
    menu_highlights_ar: [], // Corrected init
    price_range_ar: "",
    dietary_options_ar: [], // Corrected init
   
    special_features_ar: [], // Corrected init
    historical_significance_ar: "",
    entry_fee_ar: "",
    best_time_to_visit_ar: "",
    tour_guide_availability_ar: "",
    tips_ar: "",
    activities_ar: [], // Corrected init
    facilities_ar: [], // Corrected init
    safety_tips_ar: "",
    duration_ar: "",
    highlights_ar: [], // Corrected init
    religious_significance_ar: "",
    entry_rules_ar: "",
    slug_ar: "",
    categoryIds: [] as string[],
    city_en: '',
    city_ar: '',
    opening_hours: { // Updated Default structure for multilingual notes
      Monday: { isOpen: false, is24Hours: false, open: '09:00', close: '17:00', notes_en: '', notes_ar: '' },
      Tuesday: { isOpen: false, is24Hours: false, open: '09:00', close: '17:00', notes_en: '', notes_ar: '' },
      Wednesday: { isOpen: false, is24Hours: false, open: '09:00', close: '17:00', notes_en: '', notes_ar: '' },
      Thursday: { isOpen: false, is24Hours: false, open: '09:00', close: '17:00', notes_en: '', notes_ar: '' },
      Friday: { isOpen: false, is24Hours: false, open: '09:00', close: '17:00', notes_en: '', notes_ar: '' },
      Saturday: { isOpen: false, is24Hours: false, open: '09:00', close: '17:00', notes_en: '', notes_ar: '' },
      Sunday: { isOpen: false, is24Hours: false, open: '09:00', close: '17:00', notes_en: '', notes_ar: '' },
    },
  });
  
  // === Supabase Hooks ===
  const { add: addListing } = useSupabaseTable('listings');
  const { add: addListingCategory } = useSupabaseTable('listing_categories');
  const { add: addListingTranslation } = useSupabaseTable('listing_translations');
  // REMOVED Hooks for location handling - use raw client for upserts
  // const { upsert: upsertLocation } = useSupabaseTable('locations'); 
  // const { upsert: upsertLocationTranslation } = useSupabaseTable('location_translations');
  // =====================

  const { categories: baseCategories, loading: categoriesLoading } = useCategories();
  const { data: allCategoryTranslations, status: categoryTranslationsStatus } = useSupabaseTable('category_translations');
  
  // --- ADD BACK: Memoize the combined categories ---
  const combinedDisplayCategories = useMemo(() => {
    if (baseCategories && categoryTranslationsStatus === 'success' && allCategoryTranslations) {
        console.log("[NewListingForm] Memoizing combined categories...");
        const combined = baseCategories.map(cat => {
            const en = allCategoryTranslations.find(t => t.category_id === cat.id && t.language_code === 'en');
            const ar = allCategoryTranslations.find(t => t.category_id === cat.id && t.language_code === 'ar');
            return {
                ...cat,
                name_en: en?.name,
                name_ar: ar?.name,
            } as DisplayCategory;
        });
        combined.sort((a, b) => (a.name_en ?? '').localeCompare(b.name_en ?? ''));
        console.log("[NewListingForm] Combined categories memoized.");
        return combined;
    }
    return []; // Return empty array if data not ready
  }, [baseCategories, categoryTranslationsStatus, allCategoryTranslations]);

  // Combine loading states for categories (NEW)
  const categoriesCombinedLoading = categoriesLoading || categoryTranslationsStatus !== 'success';
  
  // --- Fetch Available Collections ---
  useEffect(() => {
    const fetchCollectionData = async () => {
      if (!supabase) return;
      setCollectionsLoading(true);
      console.log("[NewListingForm] Fetching available collections...");
      try {
        const { data: collectionsData, error: collectionsError } = await supabase
          .from('curated_collections')
          .select(`id, curated_collection_translations!inner(name)`)
          .eq('curated_collection_translations.language_code', 'en')
          .order('created_at', { ascending: true });
          
        if (collectionsError) throw collectionsError;

        const formattedCollections: CuratedCollection[] = collectionsData?.map((c: any) => ({
            id: c.id,
            name_en: c.curated_collection_translations?.[0]?.name || 'Unnamed Collection'
        })) || [];
        setAvailableCollections(formattedCollections);
        console.log("[NewListingForm] Available Collections:", formattedCollections);

        // Initialize selection state (all deselected initially)
        const initialSelections: CollectionSelectionState = {};
        formattedCollections.forEach(coll => {
          initialSelections[coll.id] = { selected: false, featured: false };
        });
        setCollectionSelections(initialSelections);

      } catch (error: any) {
        console.error("Error fetching collection data:", error);
        setErrorMessage("Failed to load collection data: " + error.message);
      } finally {
        setCollectionsLoading(false);
      }
    };

    fetchCollectionData();
  }, [supabase]);
  // ---------------------------------

  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;

    // If the changed field is one of the slugs, mark it as manually set.
    if (name === 'slug_en') {
        setSlugEnManuallySet(true);
    }
    if (name === 'slug_ar') {
        setSlugArManuallySet(true);
    }

    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // --- NEW Handler for Multiple Files ---
  const handleFilesSelected = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files);
      const validFiles: File[] = [];
      const newPreviews: string[] = [];
      let invalidFilesFound = false;

      newFiles.forEach(file => {
        if (file.type.startsWith('image/') && file.size <= 5 * 1024 * 1024) { // 5MB limit
          validFiles.push(file);
          newPreviews.push(URL.createObjectURL(file));
        } else {
          invalidFilesFound = true;
        }
      });

      if (invalidFilesFound) {
        alert("Some files were invalid (type must be image, size <= 5MB) and were ignored.");
      }

      setStagedImageFiles(prev => [...prev, ...validFiles]);
      setImagePreviews(prev => [...prev, ...newPreviews]);
      if (e.target) e.target.value = ""; // Reset file input
      // If this is the first image added, set it as primary
      if (stagedImageFiles.length === 0 && validFiles.length > 0) {
          setPrimaryImageIndex(0);
      }
    }
  };
  
  // --- NEW Handler to remove a staged image ---
  const handleRemoveStagedImage = (indexToRemove: number) => {
    const previewToRemove = imagePreviews[indexToRemove];
    if (previewToRemove) {
      URL.revokeObjectURL(previewToRemove);
    }
    setStagedImageFiles(prev => prev.filter((_, index) => index !== indexToRemove));
    setImagePreviews(prev => prev.filter((_, index) => index !== indexToRemove));
    
    // --- Adjust primary index if the primary image is removed ---
    // Corrected logic based on the *remaining* files count
    const remainingFilesCount = stagedImageFiles.length - 1; 
    if (indexToRemove === primaryImageIndex) {
        // If removing the primary, set the new primary to 0 if images remain
        setPrimaryImageIndex(remainingFilesCount > 0 ? 0 : 0);
    } else if (indexToRemove < primaryImageIndex) {
        // If removing before the primary, decrement the index
        setPrimaryImageIndex(prev => prev - 1);
    }
    // No change needed if removing after the primary
    // -----------------------------------------------------------
  };

  // --- Cleanup Object URLs on unmount ---
  useEffect(() => {
    return () => {
      console.log("Cleaning up object URLs:", imagePreviews);
      imagePreviews.forEach(url => {
        console.log("Revoking:", url);
        URL.revokeObjectURL(url);
      });
    };
  }, [imagePreviews]);
  // -----------------------------------------

  // --- Refactored Category Change Handler ---
  const handleCategoryChange = (categoryId: string, checked: boolean) => {
    setFormData(prev => {
      let newCategoryIds = [...prev.categoryIds];
      
      if (checked && !newCategoryIds.includes(categoryId)) {
        newCategoryIds.push(categoryId);
      } else if (!checked && newCategoryIds.includes(categoryId)) {
        newCategoryIds = newCategoryIds.filter(catId => catId !== categoryId);
      }
      
      return {
        ...prev,
        categoryIds: newCategoryIds
      };
    });
  };

  // --- Collection Selection Handler (Same as EditForm) ---
  const handleCollectionChange = (collectionId: string, selected: boolean | string) => {
      setCollectionSelections(prev => ({
          ...prev,
          [collectionId]: {
              selected: typeof selected === 'string' ? (selected === 'true') : !!selected,
              featured: typeof selected === 'string' ? (selected === 'true') : !!selected ? prev[collectionId]?.featured || false : false 
          }
      }));
  };

  const handleFeatureChange = (collectionId: string, featured: boolean) => {
      setCollectionSelections(prev => ({
          ...prev,
          [collectionId]: {
              ...prev[collectionId], 
              featured: featured
          }
      }));
  };

  // --- NEW: Fetch Location Details Handler (Copied from Edit form) ---
  const handleFetchLocationDetails = async () => {
      const url = formData.google_maps_link;
      if (!url || !url.trim()) {
          setErrorMessage("Please enter a Google Maps link first.");
          return;
      }
      
      setIsFetchingLocation(true); 
      setErrorMessage(null); 
      console.log("[NewListingForm] Fetching location details for URL:", url);

      try {
          const response = await fetch('/api/location-lookup', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ url })
          });

          const data = await response.json();

          if (!response.ok) {
              console.error("Location Lookup API Error:", data);
              throw new Error(data.message || `Failed to fetch location details (${response.status})`);
          }

          console.log("[NewListingForm] Location details received:", data);
          
          // Update form state with fetched data
          setFormData(prev => ({
              ...prev,
              location: data.name_en || prev.location, 
              location_ar: data.name_ar || '', 
              latitude: data.latitude?.toString() || prev.latitude,
              longitude: data.longitude?.toString() || prev.longitude,
              google_place_id: data.google_place_id || null, 
          }));

      } catch (error: any) {
          console.error("Failed to fetch location details:", error);
          setErrorMessage(error.message || "An unexpected error occurred while fetching location details.");
      } finally {
          setIsFetchingLocation(false); 
      }
  };
  // -----------------------------------------

  // Handler for OpeningHoursInput
  const handleOpeningHoursChange = (newOpeningHours: OpeningHoursData) => {
    setFormData(prev => ({ ...prev, opening_hours: newOpeningHours }));
  };
  
  // -----------------------------------------

  // +++ ADD NEW: Handler for Parking Select ---
  const handleParkingChange = (value: string) => {
    console.log(`[handleParkingChange] New value: ${value}`);
    setFormData((prev) => ({
      ...prev,
      parking_info_en: value,
      parking_info_ar: value, // Keep both synced with the EN value (AR value also stores EN key)
    }));
  };
  // +++ ------------------------------------ +++

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!addListing || !addListingTranslation || !addListingCategory || !supabase) {
      setErrorMessage('Database functions not ready.');
      return;
    }
    if (stagedImageFiles.length === 0) {
      setErrorMessage('Please select at least one image.');
      return;
    }

    setSaving(true);
    setErrorMessage(null);
    
    let uploadedImagePaths: string[] = [];
    let locationIdToLink: string | null = null; // Variable to hold the location ID

    try {
      // === NEW Step 0: Determine/Create Location ID ===
      console.log("[handleSubmit] Determining Location ID...");
      if (formData.google_place_id && formData.latitude && formData.longitude) {
          console.log(`[handleSubmit] Upserting location based on google_place_id: ${formData.google_place_id}`);
          // Use raw client for upsert
          const { data: upsertedLocationData, error: locUpsertError } = await supabase // Renamed variable
             .from('locations')
             .upsert({
                 google_place_id: formData.google_place_id,
                 latitude: parseFloat(formData.latitude),
                 longitude: parseFloat(formData.longitude),
             }, { onConflict: 'google_place_id' })
             .select('id')
             .single();
          if (locUpsertError || !upsertedLocationData) throw locUpsertError || new Error("Failed to upsert location based on place_id");
          locationIdToLink = upsertedLocationData.id;
          console.log(`[handleSubmit] Location ID from place_id upsert: ${locationIdToLink}`);
      } else if (formData.location || formData.city_en || formData.location_ar || formData.city_ar) {
          console.log("[handleSubmit] Inserting new location record (no place_id provided).");
          // Use raw client for insert
          const { data: insertedLocationData, error: locInsertError } = await supabase // Renamed variable
             .from('locations')
             .insert([{}]) // Insert empty object
             .select('id')
             .single();
          if (locInsertError || !insertedLocationData) throw locInsertError || new Error("Failed to insert new location");
          locationIdToLink = insertedLocationData.id;
          console.log(`[handleSubmit] Location ID from new insert: ${locationIdToLink}`);
      } else {
          console.log("[handleSubmit] No location data provided, locationIdToLink remains null.");
      }
      // ============================================

      // 1. Upload Images (Keep existing logic and logs)
      console.log("[handleSubmit] Uploading images...");
      for (const file of stagedImageFiles) {
        const fileExt = file.name.split('.').pop();
        const fileName = `${Math.random()}.${fileExt}`;
        const filePath = `listings/${fileName}`;

        // --- ADD DETAILED LOGGING FOR UPLOAD --- 
        console.log(`[handleSubmit] Attempting to upload ${filePath}...`);
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('listing-media') 
          .upload(filePath, file);
          
        // Log result immediately
        if (uploadError) {
            console.error(`[handleSubmit] Upload ERROR for ${filePath}:`, uploadError);
            // Optionally throw the error here to stop the process if an upload fails
            throw new Error(`Failed to upload ${file.name}: ${uploadError.message}`); 
        } else {
             console.log(`[handleSubmit] Upload SUCCESS for ${filePath}:`, uploadData);
             uploadedImagePaths.push(filePath); // Only push on success
        }
        // --- END DETAILED LOGGING --- 
      }
      console.log("[handleSubmit] Accumulated Uploaded Image Paths (after loop):", uploadedImagePaths); 

      // 2. Prepare listing data (UPDATED: Add location_id, ADD BACK location)
      console.log("[handleSubmit] Preparing listing data...");
      const listingData: Partial<Listing> = {
        listing_type: formData.listing_type,
        location: formData.location || 'Unknown Location', // <-- ADDED BACK (with fallback)
        google_maps_link: formData.google_maps_link || null,
        latitude: formData.latitude ? parseFloat(formData.latitude) : null,
        longitude: formData.longitude ? parseFloat(formData.longitude) : null,
        location_id: locationIdToLink, // <-- Keep this
        tags: formData.tags.length > 0 ? formData.tags : null, 
        photos_videos: uploadedImagePaths, 
      };
      
      // --- ADD LOG BEFORE INSERT --- 
      console.log("[handleSubmit] Final listingData before calling addListing:", JSON.stringify(listingData, null, 2));
      // --- END LOG BEFORE INSERT --- 

      // 3. Add Listing (Keep existing logic and logs)
      console.log("[handleSubmit] Adding listing to DB...");
      const newListing = await addListing(listingData);
      console.log("[handleSubmit] Result from addListing:", newListing);
      if (!newListing || !newListing.id) {
        throw new Error('Failed to create listing or get new listing ID.');
      }
      const newListingId = newListing.id;

      // === NEW Step 3.5: Add Location Translations ===
      if (locationIdToLink) {
          console.log(`[handleSubmit] Upserting location translations for location ID: ${locationIdToLink}`);
          const locTranslationsToUpsert = [];
          if (formData.location || formData.city_en) {
              locTranslationsToUpsert.push({
                  location_id: locationIdToLink,
                  language_code: 'en',
                  address: formData.location || null,
                  city: formData.city_en || null,
                  name: formData.location || formData.city_en || "Location EN" // Basic name
              });
          }
          if (formData.location_ar || formData.city_ar) {
              locTranslationsToUpsert.push({
                  location_id: locationIdToLink,
                  language_code: 'ar',
                  address: formData.location_ar || null,
                  city: formData.city_ar || null,
                  name: formData.location_ar || formData.city_ar || "Location AR" // Basic name
              });
          }
          if (locTranslationsToUpsert.length > 0) {
              console.log("[handleSubmit] Location Translations to Upsert:", locTranslationsToUpsert);
              // Use raw client for upsert (Corrected)
              const { error: locTransUpsertError } = await supabase 
                  .from('location_translations')
                  .upsert(locTranslationsToUpsert, { onConflict: 'location_id, language_code' });
              if (locTransUpsertError) throw locTransUpsertError;
              console.log("[handleSubmit] Location Translations upserted.");
          }
      } else {
          console.log("[handleSubmit] Skipping location translations (no locationIdToLink).");
      }
      // ==========================================

      // 4. Add Listing Translations (Keep existing logic)
      console.log("[handleSubmit] Preparing listing translations...");
      // ... (prepare translations array) ...
      console.log("[handleSubmit] Adding listing translations...");
      const translations = [];
      const commonTranslationData = { listing_id: newListingId };

      // English Translation
      if (formData.name_en) {
        translations.push({
          ...commonTranslationData,
          language_code: 'en',
          name: formData.name_en,
          description: formData.description_en || null,
          opening_hours: JSON.stringify(formData.opening_hours), 
          popular_stores: formData.popular_stores_en.length > 0 ? formData.popular_stores_en : null, // Direct assignment
          entertainment: formData.entertainment_en.length > 0 ? formData.entertainment_en : null, // Direct assignment
          dining_options: formData.dining_options_en.length > 0 ? formData.dining_options_en : null, // Direct assignment
          special_services: formData.special_services_en.length > 0 ? formData.special_services_en : null, // Direct assignment
          parking_info: formData.parking_info_en || null,
          cuisine_type: formData.cuisine_type_en || null,
          story_behind: formData.story_behind_en || null,
          menu_highlights: formData.menu_highlights_en.length > 0 ? formData.menu_highlights_en : null, // Direct assignment
          price_range: formData.price_range,
          dietary_options: formData.dietary_options_en.length > 0 ? formData.dietary_options_en : null, // Direct assignment
          special_features: formData.special_features_en.length > 0 ? formData.special_features_en : null, // Direct assignment
          historical_significance: formData.historical_significance_en || null,
          entry_fee: formData.entry_fee_en || null,
          best_time_to_visit: formData.best_time_to_visit_en || null,
          tour_guide_availability: formData.tour_guide_availability_en || null,
          tips: formData.tips_en || null,
          activities: formData.activities_en.length > 0 ? formData.activities_en : null, // Direct assignment
          facilities: formData.facilities_en.length > 0 ? formData.facilities_en : null, // Direct assignment
          safety_tips: formData.safety_tips_en || null,
          duration: formData.duration_en || null,
          highlights: formData.highlights_en.length > 0 ? formData.highlights_en : null, // Direct assignment
          religious_significance: formData.religious_significance_en || null,
          entry_rules: formData.entry_rules_en || null,
          slug: formData.slug_en || null,
        });
      }

      // Arabic Translation
      if (formData.name_ar) {
        translations.push({
          ...commonTranslationData,
          language_code: 'ar',
          name: formData.name_ar,
          description: formData.description_ar || null,
          opening_hours: JSON.stringify(formData.opening_hours), 
          popular_stores: formData.popular_stores_ar.length > 0 ? formData.popular_stores_ar : null, // Direct assignment
          entertainment: formData.entertainment_ar.length > 0 ? formData.entertainment_ar : null, // Direct assignment
          dining_options: formData.dining_options_ar.length > 0 ? formData.dining_options_ar : null, // Direct assignment
          special_services: formData.special_services_ar.length > 0 ? formData.special_services_ar : null, // Direct assignment
          parking_info: formData.parking_info_ar || null,
          cuisine_type: formData.cuisine_type_ar || null,
          story_behind: formData.story_behind_ar || null,
          menu_highlights: formData.menu_highlights_ar.length > 0 ? formData.menu_highlights_ar : null, // Direct assignment
          price_range: formData.price_range,
          dietary_options: formData.dietary_options_ar.length > 0 ? formData.dietary_options_ar : null, // Direct assignment
          special_features: formData.special_features_ar.length > 0 ? formData.special_features_ar : null, // Direct assignment
          historical_significance: formData.historical_significance_ar || null,
          entry_fee: formData.entry_fee_ar || null,
          best_time_to_visit: formData.best_time_to_visit_ar || null,
          tour_guide_availability: formData.tour_guide_availability_ar || null,
          tips: formData.tips_ar || null,
          activities: formData.activities_ar.length > 0 ? formData.activities_ar : null, // Direct assignment
          facilities: formData.facilities_ar.length > 0 ? formData.facilities_ar : null, // Direct assignment
          safety_tips: formData.safety_tips_ar || null,
          duration: formData.duration_ar || null,
          highlights: formData.highlights_ar.length > 0 ? formData.highlights_ar : null, // Direct assignment
          religious_significance: formData.religious_significance_ar || null,
          entry_rules: formData.entry_rules_ar || null,
          slug: formData.slug_ar || null,
        });
      }

      // 5. Add Translations
      for (const translation of translations) {
        await addListingTranslation(translation);
      }

      // 6. Add Categories (ADD logging/error handling)
      console.log("[handleSubmit] Adding category links...");
      for (const categoryId of formData.categoryIds) {
        try {
            console.log(` -> Linking category ID: ${categoryId}`);
            await addListingCategory({
              listing_id: newListingId,
              category_id: categoryId,
            });
        } catch (catError) {
            console.error(`Error linking category ${categoryId}:`, catError);
            // Optionally continue or throw error / set specific error message
        }
      }

      // --- NEW Step 6.5: Add Media Table Entries ---
      console.log("[handleSubmit] Preparing media table entries...");
      if (uploadedImagePaths.length > 0) {
        try {
          const publicUrlPromises = uploadedImagePaths.map(path => 
            supabase.storage.from('listing-media').getPublicUrl(path)
          );
          // Use Promise.allSettled to handle individual promise failures
          const settledResults = await Promise.allSettled(publicUrlPromises);

          const mediaRecordsToInsert = settledResults.map((result, index) => {
            if (result.status === 'fulfilled') {
              // Check if data and publicUrl exist within the fulfilled value
              const publicUrl = result.value?.data?.publicUrl;
              if (!publicUrl) {
                console.warn(`Could not get public URL for path: ${uploadedImagePaths[index]}. Skipping media record.`);
                return null;
              }
              return {
                listing_id: newListingId,
                url: publicUrl,
                is_primary: index === primaryImageIndex, // UPDATED based on state
                media_type: 'image' 
              };
            } else {
              // Handle rejected promises (errors during getPublicUrl)
              console.error(`Error getting public URL for ${uploadedImagePaths[index]}:`, result.reason);
              return null;
            }
          }).filter(record => record !== null); // Filter out null records

          if (mediaRecordsToInsert.length > 0) {
             console.log("[handleSubmit] Inserting media records:", mediaRecordsToInsert);
             const { error: mediaInsertError } = await supabase
               .from('media') // Assuming your table name is 'media'
               .insert(mediaRecordsToInsert as any); // Assert type if needed after filtering nulls

             if (mediaInsertError) {
               throw mediaInsertError;
             }
             console.log("[handleSubmit] Media records inserted successfully.");
          } else {
             console.log("[handleSubmit] No valid media records to insert (URL generation might have failed).");
          }

        } catch (mediaError: any) {
           console.error("Error creating media table entries:", mediaError); // Log message and error object separately
           // Decide if this should halt the process or just log
           // setErrorMessage(`Failed to save image metadata: ${mediaError.message}`); 
           // Potentially re-throw the error if it's critical
           // throw mediaError; 
        }
      } else {
         console.log("[handleSubmit] No uploaded images found, skipping media table entries.");
      }
      // --- END NEW Step 6.5 ---

      // 7. Add to Collections (CHANGE table, UPDATE payload, ADD logging/error handling)
      console.log("[handleSubmit] Adding collection links...");
      for (const [collectionId, selection] of Object.entries(collectionSelections)) {
        if (selection.selected) {
          try {
              console.log(` -> Linking collection ID: ${collectionId}, featured: ${selection.featured}`);
              await supabase.from('curated_collection_items').insert({ // <-- CHANGED Table Name
                listing_id: newListingId,
                collection_id: collectionId,
                feature_on_home: selection.featured, // <-- CHANGED Payload Field Name
              });
          } catch (collError) {
               console.error(`Error linking collection ${collectionId}:`, collError);
               // Optionally continue or throw error / set specific error message
          }
        }
      }

      console.log("New listing created successfully in DB:", newListing);
      
      // --- Wrap Navigation in try...catch ---
      try {
         console.log("[handleSubmit] Attempting navigation to /dashboard/listings"); // Corrected log message
         router.push("/dashboard/listings"); // Corrected Redirect path
      } catch (navigationError) {
         console.error("[handleSubmit] Error during router.push:", navigationError);
         // Optionally set an error message specific to navigation failure
         // setErrorMessage("Save successful, but failed to redirect.");
      }
      // ---------------------------------------

    } catch (err: any) {
      console.error('Error creating listing:', err); // Log the full error object
      // Try to extract more specific messages
      const specificMessage = err.details || err.message || 'An unknown error occurred during listing creation.';
      console.error('Specific Error Message:', specificMessage);
      setErrorMessage(specificMessage); // Display a more specific error if available
      // *Ensure saving is set to false on error too*
      setSaving(false); 
    } finally {
      console.log("[NewListingForm] Reached finally block."); // Add log
      // *Move setSaving(false) here as the primary place*
      setSaving(false);
    }
  };

  // --- Memoize parsed coordinates (Copied from Edit form) --- 
  const parsedLatitude = useMemo(() => {
    const lat = parseFloat(formData.latitude);
    return isNaN(lat) ? null : lat;
  }, [formData.latitude]);

  const parsedLongitude = useMemo(() => {
    const lng = parseFloat(formData.longitude);
    return isNaN(lng) ? null : lng;
  }, [formData.longitude]);
  // --------------------------------
  
  // --- Loading States Combination ---

  // ++ Auto-generate English slug ++
  useEffect(() => {
      if (!slugEnManuallySet && formData.name_en) {
          const generatedSlug = slugify(formData.name_en, { lower: true, strict: true, locale: 'en', remove: /[*+~.()'"!:@]/g });
          setFormData(prev => ({ ...prev, slug_en: generatedSlug }));
      }
      // If name_en is cleared and not manually set, clear the slug too.
      else if (!slugEnManuallySet && !formData.name_en) {
          setFormData(prev => ({ ...prev, slug_en: '' }));
      }
  }, [formData.name_en, slugEnManuallySet]);

  // ++ Auto-generate Arabic slug ++
  useEffect(() => {
      if (!slugArManuallySet && formData.name_ar) {
          // Note: slugify might transliterate or remove Arabic chars depending on config/defaults
          const generatedSlug = slugify(formData.name_ar, { lower: true, strict: true, remove: /[*+~.()'"!:@]/g }); 
          setFormData(prev => ({ ...prev, slug_ar: generatedSlug }));
      }
       // If name_ar is cleared and not manually set, clear the slug too.
      else if (!slugArManuallySet && !formData.name_ar) {
          setFormData(prev => ({ ...prev, slug_ar: '' }));
      }
  }, [formData.name_ar, slugArManuallySet]);

  // --- NEW: Handler to set the primary image ---
  const handleSetPrimaryImage = (indexToSet: number) => {
    if (indexToSet >= 0 && indexToSet < stagedImageFiles.length) {
        setPrimaryImageIndex(indexToSet);
    }
  };
  // ---------------------------------------------

  return (
    <form ref={formRef} onSubmit={handleSubmit} className="space-y-8">
      {errorMessage && (
         <div className="bg-destructive/10 border border-destructive/30 text-destructive p-4 rounded-lg flex items-center gap-2">
           <AlertCircle className="h-5 w-5 flex-shrink-0" />
           <p className="text-sm">{errorMessage}</p>
         </div>
      )}
      
      {/* --- Main Info Card --- */}
      <Card>
         {/* Listing Type Dropdown (keep as is) */}
         <CardHeader><CardTitle>Core Listing Details</CardTitle></CardHeader>
         <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
             <div className="space-y-2">
                <Label htmlFor="listing_type">Listing Type *</Label>
                <Select 
                    name="listing_type" 
                    onValueChange={(value) => setFormData(prev => ({ ...prev, listing_type: value }))} // Simplified state update
                    value={formData.listing_type} // Re-enabled value prop
                >
                    <SelectTrigger id="listing_type">
                        <SelectValue placeholder="Select Listing Type" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectGroup>
                           {LISTING_TYPES.filter(type => type.value !== "").map(type => (
                               <SelectItem key={type.value} value={type.value} >
                                   {type.label}
                               </SelectItem>
                           ))}
                        </SelectGroup>
                    </SelectContent>
                </Select>
             </div>
             
             {/* Location Name (English Address) */}
             <div className="space-y-2">
                 <Label htmlFor="location">Location Name / Address (English)</Label>
                 <Textarea id="location" name="location" value={formData.location} onChange={handleChange} placeholder="e.g., Main Street, Downtown" />
             </div>

             {/* --- START: City Dropdowns --- */}
             {/* City (English) */}
             <div className="space-y-2">
                 <Label htmlFor="city_en">City (English) *</Label>
                 <Select
                     name="city_en"
                     required
                     value={formData.city_en}
                     // === START Linked Logic ===
                     onValueChange={(value) => {
                         const matchingProvince = IRAQ_PROVINCES.find(p => p.en === value);
                         setFormData((prev) => ({ 
                             ...prev, 
                             city_en: value, 
                             city_ar: matchingProvince ? matchingProvince.ar : '' // Update Arabic city too
                         }));
                     }}
                     // === END Linked Logic ===
                 >
                     <SelectTrigger id="city_en">
                         <SelectValue placeholder="Select City (English)" />
                     </SelectTrigger>
                     <SelectContent>
                         {IRAQ_PROVINCES.map((province) => (
                             <SelectItem key={province.en} value={province.en}>
                                 {province.en}
                             </SelectItem>
                         ))}
                     </SelectContent>
                 </Select>
             </div>

             {/* City (Arabic) */}
             <div className="space-y-2">
                 <Label htmlFor="city_ar">City (Arabic) *</Label>
                 <Select
                     name="city_ar"
                     required
                     value={formData.city_ar}
                     // === START Linked Logic ===
                     onValueChange={(value) => {
                         const matchingProvince = IRAQ_PROVINCES.find(p => p.ar === value);
                         setFormData((prev) => ({ 
                             ...prev, 
                             city_ar: value, 
                             city_en: matchingProvince ? matchingProvince.en : '' // Update English city too
                         }));
                     }}
                     // === END Linked Logic ===
                     dir="rtl"
                 >
                     <SelectTrigger id="city_ar">
                         <SelectValue placeholder="اختر المدينة (عربي)" />
                     </SelectTrigger>
                     <SelectContent dir="rtl">
                         {IRAQ_PROVINCES.map((province) => (
                             <SelectItem key={province.ar} value={province.ar}>
                                 {province.ar}
                             </SelectItem>
                         ))}
                     </SelectContent>
                 </Select>
             </div>
             {/* --- END: City Dropdowns --- */}

         </CardContent>
      </Card>
      
      {/* --- NEW Multi-Image Upload Card --- */}
      <Card>
        <CardHeader>
          <CardTitle>Listing Images *</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
            {/* Hidden File Input */}
            <Input
                ref={fileInputRef}
                id="photos_videos"
                name="photos_videos"
                type="file"
                multiple
                accept="image/*" // Accept only image files
                onChange={handleFilesSelected}
                className="hidden" // Keep it hidden, trigger via button
                aria-hidden="true"
            />
            {/* Upload Button */}
            <Button
                type="button"
                variant="outline"
                onClick={() => fileInputRef.current?.click()} // Trigger hidden input
                disabled={saving}
            >
                <UploadCloud className="mr-2 h-4 w-4" /> Select Images
            </Button>

            {/* Image Previews Grid */}
            {imagePreviews.length > 0 && (
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mt-4 border p-4 rounded-md">
                    {imagePreviews.map((previewUrl, index) => (
                        <div key={previewUrl} className="relative group aspect-square border rounded-md overflow-hidden shadow-sm">
                            <Image
                                src={previewUrl}
                                alt={`Preview ${index + 1}`}
                                fill // Use fill prop
                                className="object-cover" // Use Tailwind for object-fit
                                unoptimized // Required for blob URLs
                            />
                            {/* Remove Button Overlay */}
                            <Button
                                type="button"
                                variant="destructive"
                                size="icon"
                                className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity z-10 rounded-full p-1" // Small, round, appears on hover
                                onClick={() => handleRemoveStagedImage(index)}
                                disabled={saving}
                                aria-label={`Remove image ${index + 1}`}
                            >
                                <Trash2 className="h-4 w-4" />
                            </Button>
                            {/* --- Primary Image Indicator/Button --- */}
                            {index === primaryImageIndex ? (
                                <div className="absolute bottom-1 left-1 bg-primary text-primary-foreground text-xs px-1.5 py-0.5 rounded z-10">Primary</div>
                            ) : (
                                <Button
                                    type="button"
                                    variant="secondary"
                                    size="sm"
                                    className="absolute bottom-1 left-1 h-6 px-2 text-xs opacity-0 group-hover:opacity-100 transition-opacity z-10 rounded-sm"
                                    onClick={() => handleSetPrimaryImage(index)}
                                    disabled={saving}
                                >
                                    Set Primary
                                </Button>
                            )}
                            {/* -------------------------------------- */}
                        </div>
                    ))}
                </div>
            )}
            {/* Placeholder when no images are selected */}
            {stagedImageFiles.length === 0 && (
                <div className="text-center text-muted-foreground border-2 border-dashed border-gray-300 rounded-md p-6 mt-4">
                     <ImageIcon className="mx-auto h-12 w-12 text-gray-400" />
                    <p className="mt-2 text-sm">No images selected.</p>
                    <p className="text-xs text-gray-500">Click the button above to add images (up to 5MB each).</p>
                </div>
            )}
        </CardContent>
      </Card>

      {/* --- NEW: Location Details Card (Partial) --- */}
      <Card>
          <CardHeader>
              <CardTitle>Location Details</CardTitle>
              <CardDescription>Set the location using a Google Maps link or by manually entering coordinates.</CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4">
              {/* Google Maps Link & Fetch */} 
              <div className="space-y-2">
                  <Label htmlFor="google_maps_link">Google Maps Link</Label>
                  <div className="flex gap-2">
                      <Input
                          id="google_maps_link"
                          name="google_maps_link"
                          value={formData.google_maps_link}
                          onChange={handleChange}
                          placeholder="Paste Google Maps URL here"
                      />
                      <Button 
                          type="button" 
                          onClick={handleFetchLocationDetails} 
                          disabled={isFetchingLocation || !formData.google_maps_link}
                      >
                          {isFetchingLocation ? "Fetching..." : "Fetch Details"}
                      </Button>
                  </div>
              </div>

              {/* Tags */}
              <div className="space-y-2">
                  <Label htmlFor="tags">Tags (comma-separated)</Label>
                  {/* Changed Input to TagInput and applied correct props */}
                  <TagInput 
                     value={(formData.tags || []).join(',')} 
                     onTagsChange={(newValueString: string) => handleGenericTagInputChange('tags', newValueString)}
                     placeholder="e.g., luxury, family-friendly, outdoor"
                     disabled={saving}
                  />
              </div>
              
              {/* English Address */}
              <div className="space-y-2">
                  <Label htmlFor="location">Location Name / Address (English)</Label>
                  <Textarea
                      id="location"
                      name="location"
                      value={formData.location} 
                      onChange={handleChange}
                      placeholder="e.g., Main Street, Downtown"
                  />
              </div>

              {/* Arabic Address */}
              <div className="space-y-2">
                  <Label htmlFor="location_ar">Location Name / Address (Arabic)</Label>
                  <Textarea 
                      id="location_ar" 
                      name="location_ar" 
                      value={formData.location_ar} 
                      onChange={handleChange} 
                      placeholder="مثال: الشارع الرئيسي، وسط البلد" 
                      dir="rtl" // Set text direction to right-to-left
                  />
              </div>

              {/* Latitude & Longitude (Re-adding) */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                      <Label htmlFor="latitude">Latitude</Label>
                      <Input
                          id="latitude"
                          name="latitude"
                          value={formData.latitude}
                          onChange={handleChange}
                          placeholder="e.g., 25.2048"
                          type="number" // Ensure type is number for better input handling
                          step="any"     // Allow decimals
                      />
                  </div>
                  <div className="space-y-2">
                      <Label htmlFor="longitude">Longitude</Label>
                      <Input
                          id="longitude"
                          name="longitude"
                          value={formData.longitude}
                          onChange={handleChange}
                          placeholder="e.g., 55.2708"
                          type="number" // Ensure type is number
                          step="any"     // Allow decimals
                      />
                  </div>
              </div>

              {/* Map Preview */} 
              {(parsedLatitude !== null && parsedLongitude !== null) && (
                  <div className="space-y-2 mt-4">
                       <Label>Map Preview</Label>
                       <MapDisplay 
                           latitude={parsedLatitude}
                           longitude={parsedLongitude}
                       />
                  </div>
              )}
          </CardContent>
      </Card>
      {/* ---------------------------------------- */}

      {/* Categories Card (Existing) */}
      <Card>
        <CardHeader><CardTitle>Categories</CardTitle></CardHeader>
         <CardContent>
             {categoriesCombinedLoading ? (
                 <p>Loading categories...</p>
             ) : combinedDisplayCategories.length > 0 ? (
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {combinedDisplayCategories.map(category => (
                        <div key={category.id} className="flex items-center space-x-2">
                            <Checkbox 
                                id={`category-${category.id}`}
                                checked={formData.categoryIds.includes(category.id)}
                                onCheckedChange={(checked: boolean) => handleCategoryChange(category.id, checked)}
                            />
                            <label
                                htmlFor={`category-${category.id}`}
                                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                            >
                                {category.name_en || '(No English Name)'} / {category.name_ar || '(No Arabic Name)'}
                            </label>
                        </div>
                    ))}
                </div>
             ) : (
                 <p>No categories found.</p>
             )}
         </CardContent>
      </Card>

      {/* --- Curated Collections Card (Same as EditForm) --- */}
      <Card>
        <CardHeader>
          <CardTitle>Curated Collections</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {collectionsLoading ? (
             <div className="flex justify-center items-center p-4"><Loader2 className="h-5 w-5 animate-spin text-muted-foreground" /></div>
          ) : availableCollections.length === 0 ? (
            <p className="text-sm text-muted-foreground">No collections available.</p>
          ) : (
            availableCollections.map((collection) => (
              <div key={collection.id} className="flex items-center justify-between gap-4 rounded-md border p-3">
                <div className="flex items-center gap-3">
                   <Checkbox
                    id={`collection-${collection.id}`}
                    checked={collectionSelections[collection.id]?.selected || false}
                    onCheckedChange={(checked) => handleCollectionChange(collection.id, !!checked)}
                  />
                  <Label htmlFor={`collection-${collection.id}`} className="cursor-pointer">
                    {collection.name_en}
                  </Label>
                </div>
                {collectionSelections[collection.id]?.selected && (
                   <div className="flex items-center gap-2">
                       <Label htmlFor={`feature-${collection.id}`} className="text-sm text-muted-foreground">
                         Feature on Home
                       </Label>
                       <Switch
                           id={`feature-${collection.id}`}
                           checked={collectionSelections[collection.id]?.featured || false}
                           onCheckedChange={(checked) => handleFeatureChange(collection.id, checked)}
                       />
                   </div>
                )}
              </div>
            ))
          )}
        </CardContent>
      </Card>

      {/* --- NEW: Side-by-Side Language Content --- */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* --- English Content Card --- */}
          <Card>
              <CardHeader><CardTitle>English Content</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 gap-6">
                  {/* === Always Shown Fields (EN) === */}
                  <div className="space-y-2">
                      <Label htmlFor="name_en">Name (English) *</Label>
                      <Input id="name_en" name="name_en" value={formData.name_en} onChange={handleChange} required />
                  </div>
                  <div className="space-y-2">
                      <Label htmlFor="slug_en">Slug (English)</Label>
                      <Input id="slug_en" name="slug_en" value={formData.slug_en} onChange={handleChange} />
                  </div>
                  <div className="space-y-2">
                      <Label htmlFor="description_en">Description (English)</Label>
                      <Textarea id="description_en" name="description_en" value={formData.description_en} onChange={handleChange} />
                  </div>
                  {/* REMOVED old opening_hours_en Input */}

                  {/* === Shop/Mall Specific Fields (EN) === */}
                  {formData.listing_type === 'Shop/Mall' && (
                      <>
                         <div className="space-y-2">
                           <Label htmlFor="popular_stores_en">Popular Stores (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                           <TagInput 
                              value={(formData.popular_stores_en || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('popular_stores_en', newValueString)}
                              placeholder="e.g., Zara, H&M, Apple Store (comma-separated)"
                              disabled={saving}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="entertainment_en">Entertainment (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                           <TagInput 
                              value={(formData.entertainment_en || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('entertainment_en', newValueString)}
                              placeholder="e.g., Cinema, Bowling Alley, Kids Play Area (comma-separated)"
                              disabled={saving}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="dining_options_en">Dining Options (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                           <TagInput 
                              value={(formData.dining_options_en || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('dining_options_en', newValueString)}
                              placeholder="e.g., Food Court, Fine Dining, Cafes (comma-separated)"
                              disabled={saving}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="special_services_en">Special Services (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                           <TagInput 
                              value={(formData.special_services_en || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('special_services_en', newValueString)}
                              placeholder="e.g., Personal Shopper, Valet Parking, Free WiFi (comma-separated)"
                              disabled={saving}
                           />
                         </div>
                         {/* === START Parking Info EN === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_en">Parking Info (English)</Label>
                             <Select
                                 name="parking_info_en"
                                 value={formData.parking_info_en}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                             >
                                 <SelectTrigger id="parking_info_en">
                                     <SelectValue placeholder="Select Parking Type" />
                                 </SelectTrigger>
                                 <SelectContent>
                                     {PARKING_OPTIONS.map((option) => (
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.en}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info EN === */}
                     </>
                  )}

                  {/* === Restaurant/Café Specific Fields (EN) === */}
                  {formData.listing_type === 'Restaurant/Café' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="cuisine_type_en">Cuisine Type (English)</Label><Input id="cuisine_type_en" name="cuisine_type_en" value={formData.cuisine_type_en} onChange={handleChange} disabled={saving}/></div>
                         <div className="space-y-2"><Label htmlFor="story_behind_en">Story Behind (English)</Label><Textarea id="story_behind_en" name="story_behind_en" value={formData.story_behind_en} onChange={handleChange} disabled={saving}/></div>
                         <div className="space-y-2">
                           <Label htmlFor="menu_highlights_en">Menu Highlights (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                           <TagInput 
                              value={(formData.menu_highlights_en || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('menu_highlights_en', newValueString)}
                              placeholder="e.g., Signature Dish, Best Seller, Local Specialty (comma-separated)"
                              disabled={saving}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="price_range">Price Range</Label>
                           <PriceRangeSelector
                             value={formData.price_range}
                             onChange={(newValue) => setFormData((prev) => ({ ...prev, price_range: newValue }))}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="dietary_options_en">Dietary Options (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                           <TagInput 
                              value={(formData.dietary_options_en || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('dietary_options_en', newValueString)}
                              placeholder="e.g., Vegetarian, Vegan, Gluten-Free (comma-separated)"
                              disabled={saving}
                           />
                         </div>

                      
                         <div className="space-y-2">
                           <Label htmlFor="special_features_en">Special Features (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                           <TagInput 
                              value={(formData.special_features_en || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('special_features_en', newValueString)}
                              placeholder="e.g., Live Music, View, Shisha Available (comma-separated)"
                              disabled={saving}
                           />
                         </div>
                         {/* === START Parking Info EN === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_en">Parking Info (English)</Label>
                             <Select
                                 name="parking_info_en"
                                 value={formData.parking_info_en}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                             >
                                 <SelectTrigger id="parking_info_en">
                                     <SelectValue placeholder="Select Parking Type" />
                                 </SelectTrigger>
                                 <SelectContent>
                                     {PARKING_OPTIONS.map((option) => (
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.en}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info EN === */}
                     </>
                 )}

                 {/* === Historical Site Specific Fields (EN) === */}
                 {formData.listing_type === 'Historical Site' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="historical_significance_en">Historical Significance (English)</Label><Textarea id="historical_significance_en" name="historical_significance_en" value={formData.historical_significance_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_fee_en">Entry Fee (English)</Label><Input id="entry_fee_en" name="entry_fee_en" value={formData.entry_fee_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_en">Best Time to Visit (English)</Label><Input id="best_time_to_visit_en" name="best_time_to_visit_en" value={formData.best_time_to_visit_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tour_guide_availability_en">Tour Guide Availability (English)</Label><Input id="tour_guide_availability_en" name="tour_guide_availability_en" value={formData.tour_guide_availability_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_en">Tips (English)</Label><Textarea id="tips_en" name="tips_en" value={formData.tips_en} onChange={handleChange} /></div>
                         {/* Changed Input to TagInput */}
                         <div className="space-y-2">
                            <Label htmlFor="facilities_en">Facilities (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                            <TagInput 
                                value={(formData.facilities_en || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('facilities_en', newValueString)}
                                placeholder="e.g., Restrooms, Cafe, Gift Shop (comma-separated)"
                                disabled={saving}
                            />
                         </div>
                         {/* === START Parking Info EN === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_en">Parking Info (English)</Label>
                             <Select
                                 name="parking_info_en"
                                 value={formData.parking_info_en}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                             >
                                 <SelectTrigger id="parking_info_en">
                                     <SelectValue placeholder="Select Parking Type" />
                                 </SelectTrigger>
                                 <SelectContent>
                                     {PARKING_OPTIONS.map((option) => (
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.en}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info EN === */}
                     </>
                 )}

                 {/* === Park/Nature Specific Fields (EN) === */}
                 {formData.listing_type === 'Park/Nature' && (
                     <>
                         {/* Changed Input to TagInput */}
                         <div className="space-y-2">
                            <Label htmlFor="activities_en">Activities (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                            <TagInput 
                                value={(formData.activities_en || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('activities_en', newValueString)}
                                placeholder="e.g., Hiking, Picnicking, Bird Watching (comma-separated)"
                                disabled={saving}
                            />
                         </div>
                         {/* Changed Input to TagInput */}
                         <div className="space-y-2">
                            <Label htmlFor="facilities_en">Facilities (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                            <TagInput 
                                value={(formData.facilities_en || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('facilities_en', newValueString)}
                                placeholder="e.g., Trails, Picnic Areas, Visitor Center (comma-separated)"
                                disabled={saving}
                            />
                         </div>
                         <div className="space-y-2"><Label htmlFor="safety_tips_en">Safety Tips (English)</Label><Textarea id="safety_tips_en" name="safety_tips_en" value={formData.safety_tips_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_en">Best Time to Visit (English)</Label><Input id="best_time_to_visit_en" name="best_time_to_visit_en" value={formData.best_time_to_visit_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_fee_en">Entry Fee (English)</Label><Input id="entry_fee_en" name="entry_fee_en" value={formData.entry_fee_en} onChange={handleChange} /></div>
                         {/* === START Parking Info EN === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_en">Parking Info (English)</Label>
                             <Select
                                 name="parking_info_en"
                                 value={formData.parking_info_en}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                             >
                                 <SelectTrigger id="parking_info_en">
                                     <SelectValue placeholder="Select Parking Type" />
                                 </SelectTrigger>
                                 <SelectContent>
                                     {PARKING_OPTIONS.map((option) => (
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.en}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info EN === */}
                     </>
                 )}

                 {/* === Experience Specific Fields (EN) === */}
                 {formData.listing_type === 'Experience' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="duration_en">Duration (English)</Label><Input id="duration_en" name="duration_en" value={formData.duration_en} onChange={handleChange} /></div>
                         {/* Changed Input to TagInput */}
                         <div className="space-y-2">
                            <Label htmlFor="highlights_en">Highlights (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                            <TagInput 
                                value={(formData.highlights_en || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('highlights_en', newValueString)}
                                placeholder="e.g., Hands-on activity, Unique view, Cultural insight (comma-separated)"
                                disabled={saving}
                            />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="price_range">Price Range</Label>
                           <PriceRangeSelector
                             value={formData.price_range}
                             onChange={(newValue) => setFormData((prev) => ({ ...prev, price_range: newValue }))}
                           />
                         </div>
                         <div className="space-y-2"><Label htmlFor="tips_en">Tips (English)</Label><Textarea id="tips_en" name="tips_en" value={formData.tips_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="safety_tips_en">Safety Tips (English)</Label><Textarea id="safety_tips_en" name="safety_tips_en" value={formData.safety_tips_en} onChange={handleChange} /></div>
                         {/* === START Parking Info EN === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_en">Parking Info (English)</Label>
                             <Select
                                 name="parking_info_en"
                                 value={formData.parking_info_en}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                             >
                                 <SelectTrigger id="parking_info_en">
                                     <SelectValue placeholder="Select Parking Type" />
                                 </SelectTrigger>
                                 <SelectContent>
                                     {PARKING_OPTIONS.map((option) => (
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.en}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info EN === */}
                     </>
                 )}

                 {/* === Museum Specific Fields (EN) === */}
                 {formData.listing_type === 'Museum' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="entry_fee_en">Entry Fee (English)</Label><Input id="entry_fee_en" name="entry_fee_en" value={formData.entry_fee_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_en">Best Time to Visit (English)</Label><Input id="best_time_to_visit_en" name="best_time_to_visit_en" value={formData.best_time_to_visit_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tour_guide_availability_en">Tour Guide Availability (English)</Label><Input id="tour_guide_availability_en" name="tour_guide_availability_en" value={formData.tour_guide_availability_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_en">Tips (English)</Label><Textarea id="tips_en" name="tips_en" value={formData.tips_en} onChange={handleChange} /></div>
                         {/* Changed Input to TagInput */}
                         <div className="space-y-2">
                            <Label htmlFor="facilities_en">Facilities (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                            <TagInput 
                                value={(formData.facilities_en || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('facilities_en', newValueString)}
                                placeholder="e.g., Cafe, Gift Shop, Wheelchair Access (comma-separated)"
                                disabled={saving}
                            />
                         </div>
                         {/* === START Parking Info EN === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_en">Parking Info (English)</Label>
                             <Select
                                 name="parking_info_en"
                                 value={formData.parking_info_en}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                             >
                                 <SelectTrigger id="parking_info_en">
                                     <SelectValue placeholder="Select Parking Type" />
                                 </SelectTrigger>
                                 <SelectContent>
                                     {PARKING_OPTIONS.map((option) => (
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.en}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info EN === */}
                         {/* Changed Input to TagInput */}
                         <div className="space-y-2">
                            <Label htmlFor="highlights_en">Highlights (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                            <TagInput 
                                value={(formData.highlights_en || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('highlights_en', newValueString)}
                                placeholder="e.g., Famous Exhibits, Interactive Displays, Rare Artifacts (comma-separated)"
                                disabled={saving}
                            />
                         </div>
                     </>
                 )}

                 {/* === Religious Site Specific Fields (EN) === */}
                 {formData.listing_type === 'Religious Site' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="religious_significance_en">Religious Significance (English)</Label><Textarea id="religious_significance_en" name="religious_significance_en" value={formData.religious_significance_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_rules_en">Entry Rules (English)</Label><Textarea id="entry_rules_en" name="entry_rules_en" value={formData.entry_rules_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_en">Best Time to Visit (English)</Label><Input id="best_time_to_visit_en" name="best_time_to_visit_en" value={formData.best_time_to_visit_en} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_en">Tips (English)</Label><Textarea id="tips_en" name="tips_en" value={formData.tips_en} onChange={handleChange} /></div>
                         {/* Changed Input to TagInput */}
                         <div className="space-y-2">
                            <Label htmlFor="facilities_en">Facilities (English) <span className="text-muted-foreground text-xs">(tags)</span></Label>
                            <TagInput 
                                value={(formData.facilities_en || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('facilities_en', newValueString)}
                                placeholder="e.g., Prayer Area, Ablution Facilities, Information Desk (comma-separated)"
                                disabled={saving}
                            />
                         </div>
                         {/* === START Parking Info EN === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_en">Parking Info (English)</Label>
                             <Select
                                 name="parking_info_en"
                                 value={formData.parking_info_en}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                             >
                                 <SelectTrigger id="parking_info_en">
                                     <SelectValue placeholder="Select Parking Type" />
                                 </SelectTrigger>
                                 <SelectContent>
                                     {PARKING_OPTIONS.map((option) => (
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.en}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info EN === */}
                     </>
                 )}
              </CardContent>
          </Card>

          {/* --- Arabic Content Card --- */}
          <Card>
              <CardHeader><CardTitle>Arabic Content</CardTitle></CardHeader>
              <CardContent className="grid grid-cols-1 gap-6">
                  {/* === Always Shown Fields (AR) === */}
                  <div className="space-y-2"><Label htmlFor="name_ar">Name (Arabic) *</Label><Input dir="rtl" id="name_ar" name="name_ar" value={formData.name_ar} onChange={handleChange} required /></div>
                  <div className="space-y-2"><Label htmlFor="slug_ar">Slug (Arabic)</Label><Input dir="rtl" id="slug_ar" name="slug_ar" value={formData.slug_ar} onChange={handleChange} /></div>
                  <div className="space-y-2"><Label htmlFor="description_ar">Description (Arabic)</Label><Textarea dir="rtl" id="description_ar" name="description_ar" value={formData.description_ar} onChange={handleChange} /></div>
                  {/* REMOVED old opening_hours_ar Input */}

                  {/* === Shop/Mall Specific Fields (AR) === */}
                  {formData.listing_type === 'Shop/Mall' && (
                      <>
                         <div className="space-y-2">
                            <Label htmlFor="popular_stores_ar">Popular Stores (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                            {/* Changed Input to TagInput */}
                            <TagInput 
                                value={(formData.popular_stores_ar || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('popular_stores_ar', newValueString)}
                                placeholder="مثال: زارا، إتش آند إم، متجر أبل (مفصولة بفواصل)"
                                disabled={saving}
                            />
                         </div>
                         <div className="space-y-2">
                            <Label htmlFor="entertainment_ar">Entertainment (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                            {/* Changed Input to TagInput */}
                            <TagInput 
                                value={(formData.entertainment_ar || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('entertainment_ar', newValueString)}
                                placeholder="مثال: سينما، صالة بولينغ، منطقة لعب أطفال (مفصولة بفواصل)"
                                disabled={saving}
                            />
                         </div>
                         <div className="space-y-2">
                            <Label htmlFor="dining_options_ar">Dining Options (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                            {/* Changed Input to TagInput */}
                            <TagInput 
                                value={(formData.dining_options_ar || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('dining_options_ar', newValueString)}
                                placeholder="مثال: ردهة طعام، مطاعم فاخرة، مقاهي (مفصولة بفواصل)"
                                disabled={saving}
                            />
                         </div>
                         <div className="space-y-2">
                            <Label htmlFor="special_services_ar">Special Services (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                            {/* Changed Input to TagInput */}
                            <TagInput 
                                value={(formData.special_services_ar || []).join(',')}
                                onTagsChange={(newValueString: string) => handleGenericTagInputChange('special_services_ar', newValueString)}
                                placeholder="مثال: متسوق شخصي، خدمة صف السيارات، واي فاي مجاني (مفصولة بفواصل)"
                                disabled={saving}
                            />
                         </div>
                         {/* === START Parking Info AR === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label>
                             <Select
                                 name="parking_info_ar"
                                 value={formData.parking_info_ar}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                                 dir="rtl"
                             >
                                 <SelectTrigger id="parking_info_ar">
                                     <SelectValue placeholder="اختر نوع المواقف" />
                                 </SelectTrigger>
                                 <SelectContent dir="rtl">
                                     {PARKING_OPTIONS.map((option) => (
                                         // Store the English value, display the Arabic label
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.ar}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info AR === */}
                      </>
                  )}

                  {/* === Restaurant/Café Specific Fields (AR) === */}
                  {formData.listing_type === 'Restaurant/Café' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="cuisine_type_ar">Cuisine Type (Arabic)</Label><Input dir="rtl" id="cuisine_type_ar" name="cuisine_type_ar" value={formData.cuisine_type_ar} onChange={handleChange} disabled={saving}/></div>
                         <div className="space-y-2"><Label htmlFor="story_behind_ar">Story Behind (Arabic)</Label><Textarea dir="rtl" id="story_behind_ar" name="story_behind_ar" value={formData.story_behind_ar} onChange={handleChange} disabled={saving}/></div>
                         <div className="space-y-2">
                           <Label htmlFor="menu_highlights_ar">Menu Highlights (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           <TagInput 
                              value={(formData.menu_highlights_ar || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('menu_highlights_ar', newValueString)}
                              placeholder="مثال: الطبق المميز، الأكثر مبيعاً، طبق محلي خاص (مفصولة بفواصل)"
                              disabled={saving}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="price_range">Price Range</Label>
                           <PriceRangeSelector
                             value={formData.price_range}
                             onChange={(newValue) => setFormData((prev) => ({ ...prev, price_range: newValue }))}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="dietary_options_ar">Dietary Options (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           <TagInput 
                              value={(formData.dietary_options_ar || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('dietary_options_ar', newValueString)}
                              placeholder="مثال: نباتي، نباتي صرف، خالي من الغلوتين (مفصولة بفواصل)"
                              disabled={saving}
                           />
                         </div>

                         <div className="space-y-2">
                           <Label htmlFor="special_features_ar">Special Features (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           <TagInput 
                              value={(formData.special_features_ar || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('special_features_ar', newValueString)}
                              placeholder="مثال: موسيقى حية، إطلالة، شيشة متوفرة (مفصولة بفواصل)"
                              disabled={saving}
                           />
                         </div>
                         {/* === START Parking Info AR === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label>
                             <Select
                                 name="parking_info_ar"
                                 value={formData.parking_info_ar}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                                 dir="rtl"
                             >
                                 <SelectTrigger id="parking_info_ar">
                                     <SelectValue placeholder="اختر نوع المواقف" />
                                 </SelectTrigger>
                                 <SelectContent dir="rtl">
                                     {PARKING_OPTIONS.map((option) => (
                                         // Store the English value, display the Arabic label
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.ar}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info AR === */}
                     </>
                 )}

                 {/* === Historical Site Specific Fields (AR) === */}
                 {formData.listing_type === 'Historical Site' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="historical_significance_ar">Historical Significance (Arabic)</Label><Textarea dir="rtl" id="historical_significance_ar" name="historical_significance_ar" value={formData.historical_significance_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_fee_ar">Entry Fee (Arabic)</Label><Input dir="rtl" id="entry_fee_ar" name="entry_fee_ar" value={formData.entry_fee_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_ar">Best Time to Visit (Arabic)</Label><Input dir="rtl" id="best_time_to_visit_ar" name="best_time_to_visit_ar" value={formData.best_time_to_visit_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tour_guide_availability_ar">Tour Guide Availability (Arabic)</Label><Input dir="rtl" id="tour_guide_availability_ar" name="tour_guide_availability_ar" value={formData.tour_guide_availability_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_ar">Tips (Arabic)</Label><Textarea dir="rtl" id="tips_ar" name="tips_ar" value={formData.tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2">
                           <Label htmlFor="facilities_ar">Facilities (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           {/* Changed Input to TagInput */}
                           <TagInput 
                               value={(formData.facilities_ar || []).join(',')}
                               onTagsChange={(newValueString: string) => handleGenericTagInputChange('facilities_ar', newValueString)}
                               placeholder="مثال: مراحيض، مقهى، متجر هدايا (مفصولة بفواصل)"
                               disabled={saving}
                           />
                         </div>

                         {/* === START Parking Info AR === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label>
                             <Select
                                 name="parking_info_ar"
                                 value={formData.parking_info_ar}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                                 dir="rtl"
                             >
                                 <SelectTrigger id="parking_info_ar">
                                     <SelectValue placeholder="اختر نوع المواقف" />
                                 </SelectTrigger>
                                 <SelectContent dir="rtl">
                                     {PARKING_OPTIONS.map((option) => (
                                         // Store the English value, display the Arabic label
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.ar}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info AR === */}
                     </>
                 )}

                 {/* === Park/Nature Specific Fields (AR) === */}
                 {formData.listing_type === 'Park/Nature' && (
                     <>
                         <div className="space-y-2">
                           <Label htmlFor="activities_ar">Activities (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           {/* Changed Input to TagInput */}
                           <TagInput 
                               value={(formData.activities_ar || []).join(',')}
                               onTagsChange={(newValueString: string) => handleGenericTagInputChange('activities_ar', newValueString)}
                               placeholder="مثال: المشي لمسافات طويلة، التنزه، مراقبة الطيور (مفصولة بفواصل)"
                               disabled={saving}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="facilities_ar">Facilities (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           {/* Changed Input to TagInput */}
                           <TagInput 
                               value={(formData.facilities_ar || []).join(',')}
                               onTagsChange={(newValueString: string) => handleGenericTagInputChange('facilities_ar', newValueString)}
                               placeholder="مثال: مسارات، مناطق نزهة، مركز زوار (مفصولة بفواصل)"
                               disabled={saving}
                           />
                         </div>
                         <div className="space-y-2"><Label htmlFor="safety_tips_ar">Safety Tips (Arabic)</Label><Textarea dir="rtl" id="safety_tips_ar" name="safety_tips_ar" value={formData.safety_tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_ar">Best Time to Visit (Arabic)</Label><Input dir="rtl" id="best_time_to_visit_ar" name="best_time_to_visit_ar" value={formData.best_time_to_visit_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_fee_ar">Entry Fee (Arabic)</Label><Input dir="rtl" id="entry_fee_ar" name="entry_fee_ar" value={formData.entry_fee_ar} onChange={handleChange} /></div>
                         {/* === START Parking Info AR === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label>
                             <Select
                                 name="parking_info_ar"
                                 value={formData.parking_info_ar}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                                 dir="rtl"
                             >
                                 <SelectTrigger id="parking_info_ar">
                                     <SelectValue placeholder="اختر نوع المواقف" />
                                 </SelectTrigger>
                                 <SelectContent dir="rtl">
                                     {PARKING_OPTIONS.map((option) => (
                                         // Store the English value, display the Arabic label
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.ar}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info AR === */}
                     </>
                 )}

                 {/* === Experience Specific Fields (AR) === */}
                 {formData.listing_type === 'Experience' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="duration_ar">Duration (Arabic)</Label><Input dir="rtl" id="duration_ar" name="duration_ar" value={formData.duration_ar} onChange={handleChange} /></div>
                         <div className="space-y-2">
                           <Label htmlFor="highlights_ar">Highlights (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           <TagInput 
                              value={(formData.highlights_ar || []).join(',')} 
                              onTagsChange={(newValueString: string) => handleGenericTagInputChange('highlights_ar', newValueString)}
                              placeholder="مثال: المعروضات الرئيسية، العروض التفاعلية، الأهمية التاريخية (مفصولة بفواصل)"
                              disabled={saving}
                           />
                         </div>
                         <div className="space-y-2">
                           <Label htmlFor="price_range">Price Range</Label>
                           <PriceRangeSelector
                             value={formData.price_range}
                             onChange={(newValue) => setFormData((prev) => ({ ...prev, price_range: newValue }))}
                           />
                         </div>
                         <div className="space-y-2"><Label htmlFor="tips_ar">Tips (Arabic)</Label><Textarea dir="rtl" id="tips_ar" name="tips_ar" value={formData.tips_ar} onChange={handleChange} disabled={saving}/></div>
                         <div className="space-y-2"><Label htmlFor="safety_tips_ar">Safety Tips (Arabic)</Label><Textarea dir="rtl" id="safety_tips_ar" name="safety_tips_ar" value={formData.safety_tips_ar} onChange={handleChange} disabled={saving}/></div>

                         {/* === START Parking Info AR === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label>
                             <Select
                                 name="parking_info_ar"
                                 value={formData.parking_info_ar}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                                 dir="rtl"
                             >
                                 <SelectTrigger id="parking_info_ar">
                                     <SelectValue placeholder="اختر نوع المواقف" />
                                 </SelectTrigger>
                                 <SelectContent dir="rtl">
                                     {PARKING_OPTIONS.map((option) => (
                                         // Store the English value, display the Arabic label
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.ar}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info AR === */}
                     </>
                 )}

                 {/* === Museum Specific Fields (AR) === */}
                 {formData.listing_type === 'Museum' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="entry_fee_ar">Entry Fee (Arabic)</Label><Input dir="rtl" id="entry_fee_ar" name="entry_fee_ar" value={formData.entry_fee_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_ar">Best Time to Visit (Arabic)</Label><Input dir="rtl" id="best_time_to_visit_ar" name="best_time_to_visit_ar" value={formData.best_time_to_visit_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tour_guide_availability_ar">Tour Guide Availability (Arabic)</Label><Input dir="rtl" id="tour_guide_availability_ar" name="tour_guide_availability_ar" value={formData.tour_guide_availability_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="tips_ar">Tips (Arabic)</Label><Textarea dir="rtl" id="tips_ar" name="tips_ar" value={formData.tips_ar} onChange={handleChange} /></div>
                         <div className="space-y-2">
                           <Label htmlFor="facilities_ar">Facilities (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           {/* Changed Input to TagInput */}
                           <TagInput 
                               value={(formData.facilities_ar || []).join(',')}
                               onTagsChange={(newValueString: string) => handleGenericTagInputChange('facilities_ar', newValueString)}
                               placeholder="مثال: مقهى، متجر هدايا، وصول للكراسي المتحركة (مفصولة بفواصل)"
                               disabled={saving}
                           />
                         </div>
                         {/* === START Parking Info AR === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label>
                             <Select
                                 name="parking_info_ar"
                                 value={formData.parking_info_ar}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                                 dir="rtl"
                             >
                                 <SelectTrigger id="parking_info_ar">
                                     <SelectValue placeholder="اختر نوع المواقف" />
                                 </SelectTrigger>
                                 <SelectContent dir="rtl">
                                     {PARKING_OPTIONS.map((option) => (
                                         // Store the English value, display the Arabic label
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.ar}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info AR === */}
                         <div className="space-y-2">
                           <Label htmlFor="highlights_ar">Highlights (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           {/* Changed Input to TagInput */}
                           <TagInput 
                               value={(formData.highlights_ar || []).join(',')}
                               onTagsChange={(newValueString: string) => handleGenericTagInputChange('highlights_ar', newValueString)}
                               placeholder="مثال: معروضات مشهورة، تركيبات تفاعلية، قطع نادرة (مفصولة بفواصل)"
                               disabled={saving}
                           />
                         </div>
                     </>
                 )}

                 {/* === Religious Site Specific Fields (AR) === */}
                 {formData.listing_type === 'Religious Site' && (
                     <>
                         <div className="space-y-2"><Label htmlFor="religious_significance_ar">Religious Significance (Arabic)</Label><Textarea dir="rtl" id="religious_significance_ar" name="religious_significance_ar" value={formData.religious_significance_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="entry_rules_ar">Entry Rules (Arabic)</Label><Textarea dir="rtl" id="entry_rules_ar" name="entry_rules_ar" value={formData.entry_rules_ar} onChange={handleChange} /></div>
                         <div className="space-y-2"><Label htmlFor="best_time_to_visit_ar">Best Time to Visit (Arabic)</Label><Input dir="rtl" id="best_time_to_visit_ar" name="best_time_to_visit_ar" value={formData.best_time_to_visit_ar} onChange={handleChange} disabled={saving}/></div>
                         <div className="space-y-2"><Label htmlFor="tips_ar">Tips (Arabic)</Label><Textarea dir="rtl" id="tips_ar" name="tips_ar" value={formData.tips_ar} onChange={handleChange} disabled={saving}/></div>
                         <div className="space-y-2">
                           <Label htmlFor="facilities_ar">Facilities (Arabic) <span className="text-muted-foreground text-xs">(علامات)</span></Label>
                           {/* Changed Input to TagInput */}
                           <TagInput 
                               value={(formData.facilities_ar || []).join(',')}
                               onTagsChange={(newValueString: string) => handleGenericTagInputChange('facilities_ar', newValueString)}
                               placeholder="مثال: مقاعد، دورات مياه عامة، كشك معلومات (مفصولة بفواصل)"
                               disabled={saving}
                           />
                         </div>
                         {/* === START Parking Info AR === */}
                         <div className="space-y-2">
                             <Label htmlFor="parking_info_ar">Parking Info (Arabic)</Label>
                             <Select
                                 name="parking_info_ar"
                                 value={formData.parking_info_ar}
                                 onValueChange={handleParkingChange} // USE NEW HANDLER
                                 disabled={saving}
                                 dir="rtl"
                             >
                                 <SelectTrigger id="parking_info_ar">
                                     <SelectValue placeholder="اختر نوع المواقف" />
                                 </SelectTrigger>
                                 <SelectContent dir="rtl">
                                     {PARKING_OPTIONS.map((option) => (
                                         // Store the English value, display the Arabic label
                                         <SelectItem key={option.en} value={option.en}>
                                             {option.ar}
                                         </SelectItem>
                                     ))}
                                 </SelectContent>
                             </Select>
                         </div>
                         {/* === END Parking Info AR === */}
                     </>
                 )}
              </CardContent>
          </Card>
      </div> { /* End Side-by-Side Language Content */ }

      {/* Add Opening Hours section */}
      <Card>
        <CardHeader>
          <CardTitle>Opening Hours</CardTitle>
          <CardDescription>Set the opening hours for each day of the week</CardDescription>
        </CardHeader>
        <CardContent>
          <OpeningHoursInput
            value={formData.opening_hours}
            onChange={handleOpeningHoursChange}
          />
        </CardContent>
      </Card>

      {/* Submit Buttons */}
      <div className="flex justify-end gap-3 mt-8">
        <Link href="/dashboard/listings">
          <Button type="button" variant="outline" disabled={saving}>Cancel</Button>
        </Link>
        <Button type="submit" disabled={saving}>
          {saving ? (
             <> <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Saving Listing... </>
          ) : (
             <> <Save className="mr-2 h-4 w-4" /> Create Listing </>
          )}
        </Button>
      </div>
    </form>
  );
} 